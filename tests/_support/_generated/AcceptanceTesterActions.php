<?php  //[STAMP] 2b6c5a0364f9c0469e2a4af5363ef4ce
namespace _generated;

// This class was automatically generated by build task
// You should not change it manually as it will be overwritten on next build
// @codingStandardsIgnoreFile

trait AcceptanceTesterActions
{
    /**
     * @return \Codeception\Scenario
     */
    abstract protected function getScenario();

    
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Alias to `haveHttpHeader`
     *
     * @param $name
     * @param $value
     * @see \Codeception\Module\PhpBrowser::setHeader()
     */
    public function setHeader($name, $value) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setHeader', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Alias to `haveHttpHeader`
     *
     * @param $name
     * @param $value
     * @see \Codeception\Module\PhpBrowser::setHeader()
     */
    public function tryToSetHeader($name, $value) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('setHeader', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes setHeader and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\PhpBrowser::setHeader()
     */
    public function retrySetHeader($name, $value) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('setHeader', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Authenticates user for HTTP_AUTH
     *
     * @param string $username
     * @param string $password
     * @see \Codeception\Module\PhpBrowser::amHttpAuthenticated()
     */
    public function amHttpAuthenticated($username, $password) {
        return $this->getScenario()->runStep(new \Codeception\Step\Condition('amHttpAuthenticated', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Open web page at the given absolute URL and sets its hostname as the base host.
     *
     * ``` php
     * <?php
     * $I->amOnUrl('https://codeception.com');
     * $I->amOnPage('/quickstart'); // moves to https://codeception.com/quickstart
     * ?>
     * ```
     * @see \Codeception\Module\PhpBrowser::amOnUrl()
     */
    public function amOnUrl($url) {
        return $this->getScenario()->runStep(new \Codeception\Step\Condition('amOnUrl', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Changes the subdomain for the 'url' configuration parameter.
     * Does not open a page; use `amOnPage` for that.
     *
     * ``` php
     * <?php
     * // If config is: 'http://mysite.com'
     * // or config is: 'http://www.mysite.com'
     * // or config is: 'http://company.mysite.com'
     *
     * $I->amOnSubdomain('user');
     * $I->amOnPage('/');
     * // moves to http://user.mysite.com/
     * ?>
     * ```
     *
     * @param $subdomain
     *
     * @return mixed
     * @see \Codeception\Module\PhpBrowser::amOnSubdomain()
     */
    public function amOnSubdomain($subdomain) {
        return $this->getScenario()->runStep(new \Codeception\Step\Condition('amOnSubdomain', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Low-level API method.
     * If Codeception commands are not enough, use [Guzzle HTTP Client](http://guzzlephp.org/) methods directly
     *
     * Example:
     *
     * ``` php
     * <?php
     * $I->executeInGuzzle(function (\GuzzleHttp\Client $client) {
     *      $client->get('/get', ['query' => ['foo' => 'bar']]);
     * });
     * ?>
     * ```
     *
     * It is not recommended to use this command on a regular basis.
     * If Codeception lacks important Guzzle Client methods, implement them and submit patches.
     *
     * @param Closure $function
     * @return mixed
     * @see \Codeception\Module\PhpBrowser::executeInGuzzle()
     */
    public function executeInGuzzle(\Closure $function) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('executeInGuzzle', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Low-level API method.
     * If Codeception commands are not enough, use [Guzzle HTTP Client](http://guzzlephp.org/) methods directly
     *
     * Example:
     *
     * ``` php
     * <?php
     * $I->executeInGuzzle(function (\GuzzleHttp\Client $client) {
     *      $client->get('/get', ['query' => ['foo' => 'bar']]);
     * });
     * ?>
     * ```
     *
     * It is not recommended to use this command on a regular basis.
     * If Codeception lacks important Guzzle Client methods, implement them and submit patches.
     *
     * @param Closure $function
     * @return mixed
     * @see \Codeception\Module\PhpBrowser::executeInGuzzle()
     */
    public function tryToExecuteInGuzzle(\Closure $function) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('executeInGuzzle', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes executeInGuzzle and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\PhpBrowser::executeInGuzzle()
     */
    public function retryExecuteInGuzzle(\Closure $function) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('executeInGuzzle', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sets the HTTP header to the passed value - which is used on
     * subsequent HTTP requests through PhpBrowser.
     *
     * Example:
     * ```php
     * <?php
     * $I->haveHttpHeader('X-Requested-With', 'Codeception');
     * $I->amOnPage('test-headers.php');
     * ```
     *
     * To use special chars in Header Key use HTML Character Entities:
     * Example:
     * Header with underscore - 'Client_Id'
     * should be represented as - 'Client&#x0005F;Id' or 'Client&#95;Id'
     *
     * ```php
     * <?php
     * $I->haveHttpHeader('Client&#95;Id', 'Codeception');
     * ```
     *
     * @param string $name the name of the request header
     * @param string $value the value to set it to for subsequent
     *        requests
     * @see \Codeception\Lib\InnerBrowser::haveHttpHeader()
     */
    public function haveHttpHeader($name, $value) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('haveHttpHeader', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Deletes the header with the passed name.  Subsequent requests
     * will not have the deleted header in its request.
     *
     * Example:
     * ```php
     * <?php
     * $I->haveHttpHeader('X-Requested-With', 'Codeception');
     * $I->amOnPage('test-headers.php');
     * // ...
     * $I->deleteHeader('X-Requested-With');
     * $I->amOnPage('some-other-page.php');
     * ```
     *
     * @param string $name the name of the header to delete.
     * @see \Codeception\Lib\InnerBrowser::deleteHeader()
     */
    public function deleteHeader($name) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('deleteHeader', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Deletes the header with the passed name.  Subsequent requests
     * will not have the deleted header in its request.
     *
     * Example:
     * ```php
     * <?php
     * $I->haveHttpHeader('X-Requested-With', 'Codeception');
     * $I->amOnPage('test-headers.php');
     * // ...
     * $I->deleteHeader('X-Requested-With');
     * $I->amOnPage('some-other-page.php');
     * ```
     *
     * @param string $name the name of the header to delete.
     * @see \Codeception\Lib\InnerBrowser::deleteHeader()
     */
    public function tryToDeleteHeader($name) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('deleteHeader', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes deleteHeader and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::deleteHeader()
     */
    public function retryDeleteHeader($name) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('deleteHeader', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Opens the page for the given relative URI.
     *
     * ``` php
     * <?php
     * // opens front page
     * $I->amOnPage('/');
     * // opens /register page
     * $I->amOnPage('/register');
     * ```
     *
     * @param string $page
     * @see \Codeception\Lib\InnerBrowser::amOnPage()
     */
    public function amOnPage($page) {
        return $this->getScenario()->runStep(new \Codeception\Step\Condition('amOnPage', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Perform a click on a link or a button, given by a locator.
     * If a fuzzy locator is given, the page will be searched for a button, link, or image matching the locator string.
     * For buttons, the "value" attribute, "name" attribute, and inner text are searched.
     * For links, the link text is searched.
     * For images, the "alt" attribute and inner text of any parent links are searched.
     *
     * The second parameter is a context (CSS or XPath locator) to narrow the search.
     *
     * Note that if the locator matches a button of type `submit`, the form will be submitted.
     *
     * ``` php
     * <?php
     * // simple link
     * $I->click('Logout');
     * // button of form
     * $I->click('Submit');
     * // CSS button
     * $I->click('#form input[type=submit]');
     * // XPath
     * $I->click('//form/*[@type="submit"]');
     * // link in context
     * $I->click('Logout', '#nav');
     * // using strict locator
     * $I->click(['link' => 'Login']);
     * ?>
     * ```
     *
     * @param $link
     * @param $context
     * @see \Codeception\Lib\InnerBrowser::click()
     */
    public function click($link, $context = NULL) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('click', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Perform a click on a link or a button, given by a locator.
     * If a fuzzy locator is given, the page will be searched for a button, link, or image matching the locator string.
     * For buttons, the "value" attribute, "name" attribute, and inner text are searched.
     * For links, the link text is searched.
     * For images, the "alt" attribute and inner text of any parent links are searched.
     *
     * The second parameter is a context (CSS or XPath locator) to narrow the search.
     *
     * Note that if the locator matches a button of type `submit`, the form will be submitted.
     *
     * ``` php
     * <?php
     * // simple link
     * $I->click('Logout');
     * // button of form
     * $I->click('Submit');
     * // CSS button
     * $I->click('#form input[type=submit]');
     * // XPath
     * $I->click('//form/*[@type="submit"]');
     * // link in context
     * $I->click('Logout', '#nav');
     * // using strict locator
     * $I->click(['link' => 'Login']);
     * ?>
     * ```
     *
     * @param $link
     * @param $context
     * @see \Codeception\Lib\InnerBrowser::click()
     */
    public function tryToClick($link, $context = NULL) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('click', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes click and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::click()
     */
    public function retryClick($link, $context = NULL) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('click', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the current page contains the given string (case insensitive).
     *
     * You can specify a specific HTML element (via CSS or XPath) as the second
     * parameter to only search within that element.
     *
     * ``` php
     * <?php
     * $I->see('Logout');                        // I can suppose user is logged in
     * $I->see('Sign Up', 'h1');                 // I can suppose it's a signup page
     * $I->see('Sign Up', '//body/h1');          // with XPath
     * $I->see('Sign Up', ['css' => 'body h1']); // with strict CSS locator
     * ```
     *
     * Note that the search is done after stripping all HTML tags from the body,
     * so `$I->see('strong')` will return true for strings like:
     *
     *   - `<p>I am Stronger than thou</p>`
     *   - `<script>document.createElement('strong');</script>`
     *
     * But will *not* be true for strings like:
     *
     *   - `<strong>Home</strong>`
     *   - `<div class="strong">Home</strong>`
     *   - `<!-- strong -->`
     *
     * For checking the raw source code, use `seeInSource()`.
     *
     * @param string $text
     * @param array|string $selector optional
     * @see \Codeception\Lib\InnerBrowser::see()
     */
    public function see($text, $selector = NULL) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('see', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that the current page contains the given string (case insensitive).
     *
     * You can specify a specific HTML element (via CSS or XPath) as the second
     * parameter to only search within that element.
     *
     * ``` php
     * <?php
     * $I->see('Logout');                        // I can suppose user is logged in
     * $I->see('Sign Up', 'h1');                 // I can suppose it's a signup page
     * $I->see('Sign Up', '//body/h1');          // with XPath
     * $I->see('Sign Up', ['css' => 'body h1']); // with strict CSS locator
     * ```
     *
     * Note that the search is done after stripping all HTML tags from the body,
     * so `$I->see('strong')` will return true for strings like:
     *
     *   - `<p>I am Stronger than thou</p>`
     *   - `<script>document.createElement('strong');</script>`
     *
     * But will *not* be true for strings like:
     *
     *   - `<strong>Home</strong>`
     *   - `<div class="strong">Home</strong>`
     *   - `<!-- strong -->`
     *
     * For checking the raw source code, use `seeInSource()`.
     *
     * @param string $text
     * @param array|string $selector optional
     * @see \Codeception\Lib\InnerBrowser::see()
     */
    public function tryToSee($text, $selector = NULL) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('see', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes see and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::see()
     */
    public function retrySee($text, $selector = NULL) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('see', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the current page contains the given string (case insensitive).
     *
     * You can specify a specific HTML element (via CSS or XPath) as the second
     * parameter to only search within that element.
     *
     * ``` php
     * <?php
     * $I->see('Logout');                        // I can suppose user is logged in
     * $I->see('Sign Up', 'h1');                 // I can suppose it's a signup page
     * $I->see('Sign Up', '//body/h1');          // with XPath
     * $I->see('Sign Up', ['css' => 'body h1']); // with strict CSS locator
     * ```
     *
     * Note that the search is done after stripping all HTML tags from the body,
     * so `$I->see('strong')` will return true for strings like:
     *
     *   - `<p>I am Stronger than thou</p>`
     *   - `<script>document.createElement('strong');</script>`
     *
     * But will *not* be true for strings like:
     *
     *   - `<strong>Home</strong>`
     *   - `<div class="strong">Home</strong>`
     *   - `<!-- strong -->`
     *
     * For checking the raw source code, use `seeInSource()`.
     *
     * @param string $text
     * @param array|string $selector optional
     * @see \Codeception\Lib\InnerBrowser::see()
     */
    public function canSee($text, $selector = NULL) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('see', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the current page doesn't contain the text specified (case insensitive).
     * Give a locator as the second parameter to match a specific region.
     *
     * ```php
     * <?php
     * $I->dontSee('Login');                         // I can suppose user is already logged in
     * $I->dontSee('Sign Up','h1');                  // I can suppose it's not a signup page
     * $I->dontSee('Sign Up','//body/h1');           // with XPath
     * $I->dontSee('Sign Up', ['css' => 'body h1']); // with strict CSS locator
     * ```
     *
     * Note that the search is done after stripping all HTML tags from the body,
     * so `$I->dontSee('strong')` will fail on strings like:
     *
     *   - `<p>I am Stronger than thou</p>`
     *   - `<script>document.createElement('strong');</script>`
     *
     * But will ignore strings like:
     *
     *   - `<strong>Home</strong>`
     *   - `<div class="strong">Home</strong>`
     *   - `<!-- strong -->`
     *
     * For checking the raw source code, use `seeInSource()`.
     *
     * @param string $text
     * @param array|string $selector optional
     * @see \Codeception\Lib\InnerBrowser::dontSee()
     */
    public function dontSee($text, $selector = NULL) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('dontSee', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that the current page doesn't contain the text specified (case insensitive).
     * Give a locator as the second parameter to match a specific region.
     *
     * ```php
     * <?php
     * $I->dontSee('Login');                         // I can suppose user is already logged in
     * $I->dontSee('Sign Up','h1');                  // I can suppose it's not a signup page
     * $I->dontSee('Sign Up','//body/h1');           // with XPath
     * $I->dontSee('Sign Up', ['css' => 'body h1']); // with strict CSS locator
     * ```
     *
     * Note that the search is done after stripping all HTML tags from the body,
     * so `$I->dontSee('strong')` will fail on strings like:
     *
     *   - `<p>I am Stronger than thou</p>`
     *   - `<script>document.createElement('strong');</script>`
     *
     * But will ignore strings like:
     *
     *   - `<strong>Home</strong>`
     *   - `<div class="strong">Home</strong>`
     *   - `<!-- strong -->`
     *
     * For checking the raw source code, use `seeInSource()`.
     *
     * @param string $text
     * @param array|string $selector optional
     * @see \Codeception\Lib\InnerBrowser::dontSee()
     */
    public function tryToDontSee($text, $selector = NULL) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('dontSee', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes dontSee and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::dontSee()
     */
    public function retryDontSee($text, $selector = NULL) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('dontSee', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the current page doesn't contain the text specified (case insensitive).
     * Give a locator as the second parameter to match a specific region.
     *
     * ```php
     * <?php
     * $I->dontSee('Login');                         // I can suppose user is already logged in
     * $I->dontSee('Sign Up','h1');                  // I can suppose it's not a signup page
     * $I->dontSee('Sign Up','//body/h1');           // with XPath
     * $I->dontSee('Sign Up', ['css' => 'body h1']); // with strict CSS locator
     * ```
     *
     * Note that the search is done after stripping all HTML tags from the body,
     * so `$I->dontSee('strong')` will fail on strings like:
     *
     *   - `<p>I am Stronger than thou</p>`
     *   - `<script>document.createElement('strong');</script>`
     *
     * But will ignore strings like:
     *
     *   - `<strong>Home</strong>`
     *   - `<div class="strong">Home</strong>`
     *   - `<!-- strong -->`
     *
     * For checking the raw source code, use `seeInSource()`.
     *
     * @param string $text
     * @param array|string $selector optional
     * @see \Codeception\Lib\InnerBrowser::dontSee()
     */
    public function cantSee($text, $selector = NULL) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSee', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the current page contains the given string in its
     * raw source code.
     *
     * ``` php
     * <?php
     * $I->seeInSource('<h1>Green eggs &amp; ham</h1>');
     * ```
     *
     * @param      $raw
     * @see \Codeception\Lib\InnerBrowser::seeInSource()
     */
    public function seeInSource($raw) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeInSource', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that the current page contains the given string in its
     * raw source code.
     *
     * ``` php
     * <?php
     * $I->seeInSource('<h1>Green eggs &amp; ham</h1>');
     * ```
     *
     * @param      $raw
     * @see \Codeception\Lib\InnerBrowser::seeInSource()
     */
    public function tryToSeeInSource($raw) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('seeInSource', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes seeInSource and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::seeInSource()
     */
    public function retrySeeInSource($raw) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('seeInSource', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the current page contains the given string in its
     * raw source code.
     *
     * ``` php
     * <?php
     * $I->seeInSource('<h1>Green eggs &amp; ham</h1>');
     * ```
     *
     * @param      $raw
     * @see \Codeception\Lib\InnerBrowser::seeInSource()
     */
    public function canSeeInSource($raw) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeInSource', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the current page contains the given string in its
     * raw source code.
     *
     * ```php
     * <?php
     * $I->dontSeeInSource('<h1>Green eggs &amp; ham</h1>');
     * ```
     *
     * @param      $raw
     * @see \Codeception\Lib\InnerBrowser::dontSeeInSource()
     */
    public function dontSeeInSource($raw) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeInSource', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that the current page contains the given string in its
     * raw source code.
     *
     * ```php
     * <?php
     * $I->dontSeeInSource('<h1>Green eggs &amp; ham</h1>');
     * ```
     *
     * @param      $raw
     * @see \Codeception\Lib\InnerBrowser::dontSeeInSource()
     */
    public function tryToDontSeeInSource($raw) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('dontSeeInSource', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes dontSeeInSource and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::dontSeeInSource()
     */
    public function retryDontSeeInSource($raw) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('dontSeeInSource', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the current page contains the given string in its
     * raw source code.
     *
     * ```php
     * <?php
     * $I->dontSeeInSource('<h1>Green eggs &amp; ham</h1>');
     * ```
     *
     * @param      $raw
     * @see \Codeception\Lib\InnerBrowser::dontSeeInSource()
     */
    public function cantSeeInSource($raw) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeInSource', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that there's a link with the specified text.
     * Give a full URL as the second parameter to match links with that exact URL.
     *
     * ``` php
     * <?php
     * $I->seeLink('Logout'); // matches <a href="#">Logout</a>
     * $I->seeLink('Logout','/logout'); // matches <a href="/logout">Logout</a>
     * ?>
     * ```
     *
     * @param string $text
     * @param string $url optional
     * @see \Codeception\Lib\InnerBrowser::seeLink()
     */
    public function seeLink($text, $url = NULL) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeLink', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that there's a link with the specified text.
     * Give a full URL as the second parameter to match links with that exact URL.
     *
     * ``` php
     * <?php
     * $I->seeLink('Logout'); // matches <a href="#">Logout</a>
     * $I->seeLink('Logout','/logout'); // matches <a href="/logout">Logout</a>
     * ?>
     * ```
     *
     * @param string $text
     * @param string $url optional
     * @see \Codeception\Lib\InnerBrowser::seeLink()
     */
    public function tryToSeeLink($text, $url = NULL) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('seeLink', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes seeLink and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::seeLink()
     */
    public function retrySeeLink($text, $url = NULL) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('seeLink', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that there's a link with the specified text.
     * Give a full URL as the second parameter to match links with that exact URL.
     *
     * ``` php
     * <?php
     * $I->seeLink('Logout'); // matches <a href="#">Logout</a>
     * $I->seeLink('Logout','/logout'); // matches <a href="/logout">Logout</a>
     * ?>
     * ```
     *
     * @param string $text
     * @param string $url optional
     * @see \Codeception\Lib\InnerBrowser::seeLink()
     */
    public function canSeeLink($text, $url = NULL) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeLink', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the page doesn't contain a link with the given string.
     * If the second parameter is given, only links with a matching "href" attribute will be checked.
     *
     * ``` php
     * <?php
     * $I->dontSeeLink('Logout'); // I suppose user is not logged in
     * $I->dontSeeLink('Checkout now', '/store/cart.php');
     * ?>
     * ```
     *
     * @param string $text
     * @param string $url optional
     * @see \Codeception\Lib\InnerBrowser::dontSeeLink()
     */
    public function dontSeeLink($text, $url = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeLink', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that the page doesn't contain a link with the given string.
     * If the second parameter is given, only links with a matching "href" attribute will be checked.
     *
     * ``` php
     * <?php
     * $I->dontSeeLink('Logout'); // I suppose user is not logged in
     * $I->dontSeeLink('Checkout now', '/store/cart.php');
     * ?>
     * ```
     *
     * @param string $text
     * @param string $url optional
     * @see \Codeception\Lib\InnerBrowser::dontSeeLink()
     */
    public function tryToDontSeeLink($text, $url = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('dontSeeLink', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes dontSeeLink and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::dontSeeLink()
     */
    public function retryDontSeeLink($text, $url = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('dontSeeLink', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the page doesn't contain a link with the given string.
     * If the second parameter is given, only links with a matching "href" attribute will be checked.
     *
     * ``` php
     * <?php
     * $I->dontSeeLink('Logout'); // I suppose user is not logged in
     * $I->dontSeeLink('Checkout now', '/store/cart.php');
     * ?>
     * ```
     *
     * @param string $text
     * @param string $url optional
     * @see \Codeception\Lib\InnerBrowser::dontSeeLink()
     */
    public function cantSeeLink($text, $url = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeLink', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that current URI contains the given string.
     *
     * ``` php
     * <?php
     * // to match: /home/dashboard
     * $I->seeInCurrentUrl('home');
     * // to match: /users/1
     * $I->seeInCurrentUrl('/users/');
     * ?>
     * ```
     *
     * @param string $uri
     * @see \Codeception\Lib\InnerBrowser::seeInCurrentUrl()
     */
    public function seeInCurrentUrl($uri) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeInCurrentUrl', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that current URI contains the given string.
     *
     * ``` php
     * <?php
     * // to match: /home/dashboard
     * $I->seeInCurrentUrl('home');
     * // to match: /users/1
     * $I->seeInCurrentUrl('/users/');
     * ?>
     * ```
     *
     * @param string $uri
     * @see \Codeception\Lib\InnerBrowser::seeInCurrentUrl()
     */
    public function tryToSeeInCurrentUrl($uri) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('seeInCurrentUrl', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes seeInCurrentUrl and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::seeInCurrentUrl()
     */
    public function retrySeeInCurrentUrl($uri) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('seeInCurrentUrl', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that current URI contains the given string.
     *
     * ``` php
     * <?php
     * // to match: /home/dashboard
     * $I->seeInCurrentUrl('home');
     * // to match: /users/1
     * $I->seeInCurrentUrl('/users/');
     * ?>
     * ```
     *
     * @param string $uri
     * @see \Codeception\Lib\InnerBrowser::seeInCurrentUrl()
     */
    public function canSeeInCurrentUrl($uri) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeInCurrentUrl', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the current URI doesn't contain the given string.
     *
     * ``` php
     * <?php
     * $I->dontSeeInCurrentUrl('/users/');
     * ?>
     * ```
     *
     * @param string $uri
     * @see \Codeception\Lib\InnerBrowser::dontSeeInCurrentUrl()
     */
    public function dontSeeInCurrentUrl($uri) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeInCurrentUrl', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that the current URI doesn't contain the given string.
     *
     * ``` php
     * <?php
     * $I->dontSeeInCurrentUrl('/users/');
     * ?>
     * ```
     *
     * @param string $uri
     * @see \Codeception\Lib\InnerBrowser::dontSeeInCurrentUrl()
     */
    public function tryToDontSeeInCurrentUrl($uri) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('dontSeeInCurrentUrl', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes dontSeeInCurrentUrl and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::dontSeeInCurrentUrl()
     */
    public function retryDontSeeInCurrentUrl($uri) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('dontSeeInCurrentUrl', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the current URI doesn't contain the given string.
     *
     * ``` php
     * <?php
     * $I->dontSeeInCurrentUrl('/users/');
     * ?>
     * ```
     *
     * @param string $uri
     * @see \Codeception\Lib\InnerBrowser::dontSeeInCurrentUrl()
     */
    public function cantSeeInCurrentUrl($uri) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeInCurrentUrl', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the current URL is equal to the given string.
     * Unlike `seeInCurrentUrl`, this only matches the full URL.
     *
     * ``` php
     * <?php
     * // to match root url
     * $I->seeCurrentUrlEquals('/');
     * ?>
     * ```
     *
     * @param string $uri
     * @see \Codeception\Lib\InnerBrowser::seeCurrentUrlEquals()
     */
    public function seeCurrentUrlEquals($uri) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeCurrentUrlEquals', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that the current URL is equal to the given string.
     * Unlike `seeInCurrentUrl`, this only matches the full URL.
     *
     * ``` php
     * <?php
     * // to match root url
     * $I->seeCurrentUrlEquals('/');
     * ?>
     * ```
     *
     * @param string $uri
     * @see \Codeception\Lib\InnerBrowser::seeCurrentUrlEquals()
     */
    public function tryToSeeCurrentUrlEquals($uri) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('seeCurrentUrlEquals', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes seeCurrentUrlEquals and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::seeCurrentUrlEquals()
     */
    public function retrySeeCurrentUrlEquals($uri) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('seeCurrentUrlEquals', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the current URL is equal to the given string.
     * Unlike `seeInCurrentUrl`, this only matches the full URL.
     *
     * ``` php
     * <?php
     * // to match root url
     * $I->seeCurrentUrlEquals('/');
     * ?>
     * ```
     *
     * @param string $uri
     * @see \Codeception\Lib\InnerBrowser::seeCurrentUrlEquals()
     */
    public function canSeeCurrentUrlEquals($uri) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeCurrentUrlEquals', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the current URL doesn't equal the given string.
     * Unlike `dontSeeInCurrentUrl`, this only matches the full URL.
     *
     * ``` php
     * <?php
     * // current url is not root
     * $I->dontSeeCurrentUrlEquals('/');
     * ?>
     * ```
     *
     * @param string $uri
     * @see \Codeception\Lib\InnerBrowser::dontSeeCurrentUrlEquals()
     */
    public function dontSeeCurrentUrlEquals($uri) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeCurrentUrlEquals', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that the current URL doesn't equal the given string.
     * Unlike `dontSeeInCurrentUrl`, this only matches the full URL.
     *
     * ``` php
     * <?php
     * // current url is not root
     * $I->dontSeeCurrentUrlEquals('/');
     * ?>
     * ```
     *
     * @param string $uri
     * @see \Codeception\Lib\InnerBrowser::dontSeeCurrentUrlEquals()
     */
    public function tryToDontSeeCurrentUrlEquals($uri) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('dontSeeCurrentUrlEquals', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes dontSeeCurrentUrlEquals and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::dontSeeCurrentUrlEquals()
     */
    public function retryDontSeeCurrentUrlEquals($uri) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('dontSeeCurrentUrlEquals', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the current URL doesn't equal the given string.
     * Unlike `dontSeeInCurrentUrl`, this only matches the full URL.
     *
     * ``` php
     * <?php
     * // current url is not root
     * $I->dontSeeCurrentUrlEquals('/');
     * ?>
     * ```
     *
     * @param string $uri
     * @see \Codeception\Lib\InnerBrowser::dontSeeCurrentUrlEquals()
     */
    public function cantSeeCurrentUrlEquals($uri) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeCurrentUrlEquals', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the current URL matches the given regular expression.
     *
     * ``` php
     * <?php
     * // to match root url
     * $I->seeCurrentUrlMatches('~^/users/(\d+)~');
     * ?>
     * ```
     *
     * @param string $uri
     * @see \Codeception\Lib\InnerBrowser::seeCurrentUrlMatches()
     */
    public function seeCurrentUrlMatches($uri) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeCurrentUrlMatches', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that the current URL matches the given regular expression.
     *
     * ``` php
     * <?php
     * // to match root url
     * $I->seeCurrentUrlMatches('~^/users/(\d+)~');
     * ?>
     * ```
     *
     * @param string $uri
     * @see \Codeception\Lib\InnerBrowser::seeCurrentUrlMatches()
     */
    public function tryToSeeCurrentUrlMatches($uri) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('seeCurrentUrlMatches', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes seeCurrentUrlMatches and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::seeCurrentUrlMatches()
     */
    public function retrySeeCurrentUrlMatches($uri) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('seeCurrentUrlMatches', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the current URL matches the given regular expression.
     *
     * ``` php
     * <?php
     * // to match root url
     * $I->seeCurrentUrlMatches('~^/users/(\d+)~');
     * ?>
     * ```
     *
     * @param string $uri
     * @see \Codeception\Lib\InnerBrowser::seeCurrentUrlMatches()
     */
    public function canSeeCurrentUrlMatches($uri) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeCurrentUrlMatches', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that current url doesn't match the given regular expression.
     *
     * ``` php
     * <?php
     * // to match root url
     * $I->dontSeeCurrentUrlMatches('~^/users/(\d+)~');
     * ?>
     * ```
     *
     * @param string $uri
     * @see \Codeception\Lib\InnerBrowser::dontSeeCurrentUrlMatches()
     */
    public function dontSeeCurrentUrlMatches($uri) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeCurrentUrlMatches', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that current url doesn't match the given regular expression.
     *
     * ``` php
     * <?php
     * // to match root url
     * $I->dontSeeCurrentUrlMatches('~^/users/(\d+)~');
     * ?>
     * ```
     *
     * @param string $uri
     * @see \Codeception\Lib\InnerBrowser::dontSeeCurrentUrlMatches()
     */
    public function tryToDontSeeCurrentUrlMatches($uri) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('dontSeeCurrentUrlMatches', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes dontSeeCurrentUrlMatches and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::dontSeeCurrentUrlMatches()
     */
    public function retryDontSeeCurrentUrlMatches($uri) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('dontSeeCurrentUrlMatches', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that current url doesn't match the given regular expression.
     *
     * ``` php
     * <?php
     * // to match root url
     * $I->dontSeeCurrentUrlMatches('~^/users/(\d+)~');
     * ?>
     * ```
     *
     * @param string $uri
     * @see \Codeception\Lib\InnerBrowser::dontSeeCurrentUrlMatches()
     */
    public function cantSeeCurrentUrlMatches($uri) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeCurrentUrlMatches', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Executes the given regular expression against the current URI and returns the first capturing group.
     * If no parameters are provided, the full URI is returned.
     *
     * ``` php
     * <?php
     * $user_id = $I->grabFromCurrentUrl('~^/user/(\d+)/~');
     * $uri = $I->grabFromCurrentUrl();
     * ?>
     * ```
     *
     * @param string $uri optional
     *
     * @return mixed
     * @see \Codeception\Lib\InnerBrowser::grabFromCurrentUrl()
     */
    public function grabFromCurrentUrl($uri = NULL) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabFromCurrentUrl', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes grabFromCurrentUrl and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::grabFromCurrentUrl()
     */
    public function retryGrabFromCurrentUrl($uri = NULL) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('grabFromCurrentUrl', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the specified checkbox is checked.
     *
     * ``` php
     * <?php
     * $I->seeCheckboxIsChecked('#agree'); // I suppose user agreed to terms
     * $I->seeCheckboxIsChecked('#signup_form input[type=checkbox]'); // I suppose user agreed to terms, If there is only one checkbox in form.
     * $I->seeCheckboxIsChecked('//form/input[@type=checkbox and @name=agree]');
     * ?>
     * ```
     *
     * @param $checkbox
     * @see \Codeception\Lib\InnerBrowser::seeCheckboxIsChecked()
     */
    public function seeCheckboxIsChecked($checkbox) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeCheckboxIsChecked', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that the specified checkbox is checked.
     *
     * ``` php
     * <?php
     * $I->seeCheckboxIsChecked('#agree'); // I suppose user agreed to terms
     * $I->seeCheckboxIsChecked('#signup_form input[type=checkbox]'); // I suppose user agreed to terms, If there is only one checkbox in form.
     * $I->seeCheckboxIsChecked('//form/input[@type=checkbox and @name=agree]');
     * ?>
     * ```
     *
     * @param $checkbox
     * @see \Codeception\Lib\InnerBrowser::seeCheckboxIsChecked()
     */
    public function tryToSeeCheckboxIsChecked($checkbox) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('seeCheckboxIsChecked', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes seeCheckboxIsChecked and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::seeCheckboxIsChecked()
     */
    public function retrySeeCheckboxIsChecked($checkbox) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('seeCheckboxIsChecked', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the specified checkbox is checked.
     *
     * ``` php
     * <?php
     * $I->seeCheckboxIsChecked('#agree'); // I suppose user agreed to terms
     * $I->seeCheckboxIsChecked('#signup_form input[type=checkbox]'); // I suppose user agreed to terms, If there is only one checkbox in form.
     * $I->seeCheckboxIsChecked('//form/input[@type=checkbox and @name=agree]');
     * ?>
     * ```
     *
     * @param $checkbox
     * @see \Codeception\Lib\InnerBrowser::seeCheckboxIsChecked()
     */
    public function canSeeCheckboxIsChecked($checkbox) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeCheckboxIsChecked', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Check that the specified checkbox is unchecked.
     *
     * ``` php
     * <?php
     * $I->dontSeeCheckboxIsChecked('#agree'); // I suppose user didn't agree to terms
     * $I->seeCheckboxIsChecked('#signup_form input[type=checkbox]'); // I suppose user didn't check the first checkbox in form.
     * ?>
     * ```
     *
     * @param $checkbox
     * @see \Codeception\Lib\InnerBrowser::dontSeeCheckboxIsChecked()
     */
    public function dontSeeCheckboxIsChecked($checkbox) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeCheckboxIsChecked', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Check that the specified checkbox is unchecked.
     *
     * ``` php
     * <?php
     * $I->dontSeeCheckboxIsChecked('#agree'); // I suppose user didn't agree to terms
     * $I->seeCheckboxIsChecked('#signup_form input[type=checkbox]'); // I suppose user didn't check the first checkbox in form.
     * ?>
     * ```
     *
     * @param $checkbox
     * @see \Codeception\Lib\InnerBrowser::dontSeeCheckboxIsChecked()
     */
    public function tryToDontSeeCheckboxIsChecked($checkbox) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('dontSeeCheckboxIsChecked', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes dontSeeCheckboxIsChecked and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::dontSeeCheckboxIsChecked()
     */
    public function retryDontSeeCheckboxIsChecked($checkbox) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('dontSeeCheckboxIsChecked', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Check that the specified checkbox is unchecked.
     *
     * ``` php
     * <?php
     * $I->dontSeeCheckboxIsChecked('#agree'); // I suppose user didn't agree to terms
     * $I->seeCheckboxIsChecked('#signup_form input[type=checkbox]'); // I suppose user didn't check the first checkbox in form.
     * ?>
     * ```
     *
     * @param $checkbox
     * @see \Codeception\Lib\InnerBrowser::dontSeeCheckboxIsChecked()
     */
    public function cantSeeCheckboxIsChecked($checkbox) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeCheckboxIsChecked', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the given input field or textarea *equals* (i.e. not just contains) the given value.
     * Fields are matched by label text, the "name" attribute, CSS, or XPath.
     *
     * ``` php
     * <?php
     * $I->seeInField('Body','Type your comment here');
     * $I->seeInField('form textarea[name=body]','Type your comment here');
     * $I->seeInField('form input[type=hidden]','hidden_value');
     * $I->seeInField('#searchform input','Search');
     * $I->seeInField('//form/*[@name=search]','Search');
     * $I->seeInField(['name' => 'search'], 'Search');
     * ?>
     * ```
     *
     * @param $field
     * @param $value
     * @see \Codeception\Lib\InnerBrowser::seeInField()
     */
    public function seeInField($field, $value) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeInField', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that the given input field or textarea *equals* (i.e. not just contains) the given value.
     * Fields are matched by label text, the "name" attribute, CSS, or XPath.
     *
     * ``` php
     * <?php
     * $I->seeInField('Body','Type your comment here');
     * $I->seeInField('form textarea[name=body]','Type your comment here');
     * $I->seeInField('form input[type=hidden]','hidden_value');
     * $I->seeInField('#searchform input','Search');
     * $I->seeInField('//form/*[@name=search]','Search');
     * $I->seeInField(['name' => 'search'], 'Search');
     * ?>
     * ```
     *
     * @param $field
     * @param $value
     * @see \Codeception\Lib\InnerBrowser::seeInField()
     */
    public function tryToSeeInField($field, $value) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('seeInField', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes seeInField and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::seeInField()
     */
    public function retrySeeInField($field, $value) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('seeInField', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the given input field or textarea *equals* (i.e. not just contains) the given value.
     * Fields are matched by label text, the "name" attribute, CSS, or XPath.
     *
     * ``` php
     * <?php
     * $I->seeInField('Body','Type your comment here');
     * $I->seeInField('form textarea[name=body]','Type your comment here');
     * $I->seeInField('form input[type=hidden]','hidden_value');
     * $I->seeInField('#searchform input','Search');
     * $I->seeInField('//form/*[@name=search]','Search');
     * $I->seeInField(['name' => 'search'], 'Search');
     * ?>
     * ```
     *
     * @param $field
     * @param $value
     * @see \Codeception\Lib\InnerBrowser::seeInField()
     */
    public function canSeeInField($field, $value) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeInField', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that an input field or textarea doesn't contain the given value.
     * For fuzzy locators, the field is matched by label text, CSS and XPath.
     *
     * ``` php
     * <?php
     * $I->dontSeeInField('Body','Type your comment here');
     * $I->dontSeeInField('form textarea[name=body]','Type your comment here');
     * $I->dontSeeInField('form input[type=hidden]','hidden_value');
     * $I->dontSeeInField('#searchform input','Search');
     * $I->dontSeeInField('//form/*[@name=search]','Search');
     * $I->dontSeeInField(['name' => 'search'], 'Search');
     * ?>
     * ```
     *
     * @param $field
     * @param $value
     * @see \Codeception\Lib\InnerBrowser::dontSeeInField()
     */
    public function dontSeeInField($field, $value) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeInField', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that an input field or textarea doesn't contain the given value.
     * For fuzzy locators, the field is matched by label text, CSS and XPath.
     *
     * ``` php
     * <?php
     * $I->dontSeeInField('Body','Type your comment here');
     * $I->dontSeeInField('form textarea[name=body]','Type your comment here');
     * $I->dontSeeInField('form input[type=hidden]','hidden_value');
     * $I->dontSeeInField('#searchform input','Search');
     * $I->dontSeeInField('//form/*[@name=search]','Search');
     * $I->dontSeeInField(['name' => 'search'], 'Search');
     * ?>
     * ```
     *
     * @param $field
     * @param $value
     * @see \Codeception\Lib\InnerBrowser::dontSeeInField()
     */
    public function tryToDontSeeInField($field, $value) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('dontSeeInField', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes dontSeeInField and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::dontSeeInField()
     */
    public function retryDontSeeInField($field, $value) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('dontSeeInField', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that an input field or textarea doesn't contain the given value.
     * For fuzzy locators, the field is matched by label text, CSS and XPath.
     *
     * ``` php
     * <?php
     * $I->dontSeeInField('Body','Type your comment here');
     * $I->dontSeeInField('form textarea[name=body]','Type your comment here');
     * $I->dontSeeInField('form input[type=hidden]','hidden_value');
     * $I->dontSeeInField('#searchform input','Search');
     * $I->dontSeeInField('//form/*[@name=search]','Search');
     * $I->dontSeeInField(['name' => 'search'], 'Search');
     * ?>
     * ```
     *
     * @param $field
     * @param $value
     * @see \Codeception\Lib\InnerBrowser::dontSeeInField()
     */
    public function cantSeeInField($field, $value) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeInField', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks if the array of form parameters (name => value) are set on the form matched with the
     * passed selector.
     *
     * ``` php
     * <?php
     * $I->seeInFormFields('form[name=myform]', [
     *      'input1' => 'value',
     *      'input2' => 'other value',
     * ]);
     * ?>
     * ```
     *
     * For multi-select elements, or to check values of multiple elements with the same name, an
     * array may be passed:
     *
     * ``` php
     * <?php
     * $I->seeInFormFields('.form-class', [
     *      'multiselect' => [
     *          'value1',
     *          'value2',
     *      ],
     *      'checkbox[]' => [
     *          'a checked value',
     *          'another checked value',
     *      ],
     * ]);
     * ?>
     * ```
     *
     * Additionally, checkbox values can be checked with a boolean.
     *
     * ``` php
     * <?php
     * $I->seeInFormFields('#form-id', [
     *      'checkbox1' => true,        // passes if checked
     *      'checkbox2' => false,       // passes if unchecked
     * ]);
     * ?>
     * ```
     *
     * Pair this with submitForm for quick testing magic.
     *
     * ``` php
     * <?php
     * $form = [
     *      'field1' => 'value',
     *      'field2' => 'another value',
     *      'checkbox1' => true,
     *      // ...
     * ];
     * $I->submitForm('//form[@id=my-form]', $form, 'submitButton');
     * // $I->amOnPage('/path/to/form-page') may be needed
     * $I->seeInFormFields('//form[@id=my-form]', $form);
     * ?>
     * ```
     *
     * @param $formSelector
     * @param $params
     * @see \Codeception\Lib\InnerBrowser::seeInFormFields()
     */
    public function seeInFormFields($formSelector, array $params) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeInFormFields', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks if the array of form parameters (name => value) are set on the form matched with the
     * passed selector.
     *
     * ``` php
     * <?php
     * $I->seeInFormFields('form[name=myform]', [
     *      'input1' => 'value',
     *      'input2' => 'other value',
     * ]);
     * ?>
     * ```
     *
     * For multi-select elements, or to check values of multiple elements with the same name, an
     * array may be passed:
     *
     * ``` php
     * <?php
     * $I->seeInFormFields('.form-class', [
     *      'multiselect' => [
     *          'value1',
     *          'value2',
     *      ],
     *      'checkbox[]' => [
     *          'a checked value',
     *          'another checked value',
     *      ],
     * ]);
     * ?>
     * ```
     *
     * Additionally, checkbox values can be checked with a boolean.
     *
     * ``` php
     * <?php
     * $I->seeInFormFields('#form-id', [
     *      'checkbox1' => true,        // passes if checked
     *      'checkbox2' => false,       // passes if unchecked
     * ]);
     * ?>
     * ```
     *
     * Pair this with submitForm for quick testing magic.
     *
     * ``` php
     * <?php
     * $form = [
     *      'field1' => 'value',
     *      'field2' => 'another value',
     *      'checkbox1' => true,
     *      // ...
     * ];
     * $I->submitForm('//form[@id=my-form]', $form, 'submitButton');
     * // $I->amOnPage('/path/to/form-page') may be needed
     * $I->seeInFormFields('//form[@id=my-form]', $form);
     * ?>
     * ```
     *
     * @param $formSelector
     * @param $params
     * @see \Codeception\Lib\InnerBrowser::seeInFormFields()
     */
    public function tryToSeeInFormFields($formSelector, array $params) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('seeInFormFields', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes seeInFormFields and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::seeInFormFields()
     */
    public function retrySeeInFormFields($formSelector, array $params) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('seeInFormFields', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks if the array of form parameters (name => value) are set on the form matched with the
     * passed selector.
     *
     * ``` php
     * <?php
     * $I->seeInFormFields('form[name=myform]', [
     *      'input1' => 'value',
     *      'input2' => 'other value',
     * ]);
     * ?>
     * ```
     *
     * For multi-select elements, or to check values of multiple elements with the same name, an
     * array may be passed:
     *
     * ``` php
     * <?php
     * $I->seeInFormFields('.form-class', [
     *      'multiselect' => [
     *          'value1',
     *          'value2',
     *      ],
     *      'checkbox[]' => [
     *          'a checked value',
     *          'another checked value',
     *      ],
     * ]);
     * ?>
     * ```
     *
     * Additionally, checkbox values can be checked with a boolean.
     *
     * ``` php
     * <?php
     * $I->seeInFormFields('#form-id', [
     *      'checkbox1' => true,        // passes if checked
     *      'checkbox2' => false,       // passes if unchecked
     * ]);
     * ?>
     * ```
     *
     * Pair this with submitForm for quick testing magic.
     *
     * ``` php
     * <?php
     * $form = [
     *      'field1' => 'value',
     *      'field2' => 'another value',
     *      'checkbox1' => true,
     *      // ...
     * ];
     * $I->submitForm('//form[@id=my-form]', $form, 'submitButton');
     * // $I->amOnPage('/path/to/form-page') may be needed
     * $I->seeInFormFields('//form[@id=my-form]', $form);
     * ?>
     * ```
     *
     * @param $formSelector
     * @param $params
     * @see \Codeception\Lib\InnerBrowser::seeInFormFields()
     */
    public function canSeeInFormFields($formSelector, array $params) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeInFormFields', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks if the array of form parameters (name => value) are not set on the form matched with
     * the passed selector.
     *
     * ``` php
     * <?php
     * $I->dontSeeInFormFields('form[name=myform]', [
     *      'input1' => 'non-existent value',
     *      'input2' => 'other non-existent value',
     * ]);
     * ?>
     * ```
     *
     * To check that an element hasn't been assigned any one of many values, an array can be passed
     * as the value:
     *
     * ``` php
     * <?php
     * $I->dontSeeInFormFields('.form-class', [
     *      'fieldName' => [
     *          'This value shouldn\'t be set',
     *          'And this value shouldn\'t be set',
     *      ],
     * ]);
     * ?>
     * ```
     *
     * Additionally, checkbox values can be checked with a boolean.
     *
     * ``` php
     * <?php
     * $I->dontSeeInFormFields('#form-id', [
     *      'checkbox1' => true,        // fails if checked
     *      'checkbox2' => false,       // fails if unchecked
     * ]);
     * ?>
     * ```
     *
     * @param $formSelector
     * @param $params
     * @see \Codeception\Lib\InnerBrowser::dontSeeInFormFields()
     */
    public function dontSeeInFormFields($formSelector, array $params) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeInFormFields', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks if the array of form parameters (name => value) are not set on the form matched with
     * the passed selector.
     *
     * ``` php
     * <?php
     * $I->dontSeeInFormFields('form[name=myform]', [
     *      'input1' => 'non-existent value',
     *      'input2' => 'other non-existent value',
     * ]);
     * ?>
     * ```
     *
     * To check that an element hasn't been assigned any one of many values, an array can be passed
     * as the value:
     *
     * ``` php
     * <?php
     * $I->dontSeeInFormFields('.form-class', [
     *      'fieldName' => [
     *          'This value shouldn\'t be set',
     *          'And this value shouldn\'t be set',
     *      ],
     * ]);
     * ?>
     * ```
     *
     * Additionally, checkbox values can be checked with a boolean.
     *
     * ``` php
     * <?php
     * $I->dontSeeInFormFields('#form-id', [
     *      'checkbox1' => true,        // fails if checked
     *      'checkbox2' => false,       // fails if unchecked
     * ]);
     * ?>
     * ```
     *
     * @param $formSelector
     * @param $params
     * @see \Codeception\Lib\InnerBrowser::dontSeeInFormFields()
     */
    public function tryToDontSeeInFormFields($formSelector, array $params) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('dontSeeInFormFields', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes dontSeeInFormFields and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::dontSeeInFormFields()
     */
    public function retryDontSeeInFormFields($formSelector, array $params) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('dontSeeInFormFields', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks if the array of form parameters (name => value) are not set on the form matched with
     * the passed selector.
     *
     * ``` php
     * <?php
     * $I->dontSeeInFormFields('form[name=myform]', [
     *      'input1' => 'non-existent value',
     *      'input2' => 'other non-existent value',
     * ]);
     * ?>
     * ```
     *
     * To check that an element hasn't been assigned any one of many values, an array can be passed
     * as the value:
     *
     * ``` php
     * <?php
     * $I->dontSeeInFormFields('.form-class', [
     *      'fieldName' => [
     *          'This value shouldn\'t be set',
     *          'And this value shouldn\'t be set',
     *      ],
     * ]);
     * ?>
     * ```
     *
     * Additionally, checkbox values can be checked with a boolean.
     *
     * ``` php
     * <?php
     * $I->dontSeeInFormFields('#form-id', [
     *      'checkbox1' => true,        // fails if checked
     *      'checkbox2' => false,       // fails if unchecked
     * ]);
     * ?>
     * ```
     *
     * @param $formSelector
     * @param $params
     * @see \Codeception\Lib\InnerBrowser::dontSeeInFormFields()
     */
    public function cantSeeInFormFields($formSelector, array $params) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeInFormFields', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Submits the given form on the page, with the given form
     * values.  Pass the form field's values as an array in the second
     * parameter.
     *
     * Although this function can be used as a short-hand version of
     * `fillField()`, `selectOption()`, `click()` etc. it has some important
     * differences:
     *
     *  * Only field *names* may be used, not CSS/XPath selectors nor field labels
     *  * If a field is sent to this function that does *not* exist on the page,
     *    it will silently be added to the HTTP request.  This is helpful for testing
     *    some types of forms, but be aware that you will *not* get an exception
     *    like you would if you called `fillField()` or `selectOption()` with
     *    a missing field.
     *
     * Fields that are not provided will be filled by their values from the page,
     * or from any previous calls to `fillField()`, `selectOption()` etc.
     * You don't need to click the 'Submit' button afterwards.
     * This command itself triggers the request to form's action.
     *
     * You can optionally specify which button's value to include
     * in the request with the last parameter (as an alternative to
     * explicitly setting its value in the second parameter), as
     * button values are not otherwise included in the request.
     *
     * Examples:
     *
     * ``` php
     * <?php
     * $I->submitForm('#login', [
     *     'login' => 'davert',
     *     'password' => '123456'
     * ]);
     * // or
     * $I->submitForm('#login', [
     *     'login' => 'davert',
     *     'password' => '123456'
     * ], 'submitButtonName');
     *
     * ```
     *
     * For example, given this sample "Sign Up" form:
     *
     * ``` html
     * <form id="userForm">
     *     Login:
     *     <input type="text" name="user[login]" /><br/>
     *     Password:
     *     <input type="password" name="user[password]" /><br/>
     *     Do you agree to our terms?
     *     <input type="checkbox" name="user[agree]" /><br/>
     *     Subscribe to our newsletter?
     *     <input type="checkbox" name="user[newsletter]" value="1" checked="checked" /><br/>
     *     Select pricing plan:
     *     <select name="plan">
     *         <option value="1">Free</option>
     *         <option value="2" selected="selected">Paid</option>
     *     </select>
     *     <input type="submit" name="submitButton" value="Submit" />
     * </form>
     * ```
     *
     * You could write the following to submit it:
     *
     * ``` php
     * <?php
     * $I->submitForm(
     *     '#userForm',
     *     [
     *         'user' => [
     *             'login' => 'Davert',
     *             'password' => '123456',
     *             'agree' => true
     *         ]
     *     ],
     *     'submitButton'
     * );
     * ```
     * Note that "2" will be the submitted value for the "plan" field, as it is
     * the selected option.
     *
     * To uncheck the pre-checked checkbox "newsletter", call `$I->uncheckOption(['name' => 'user[newsletter]']);` *before*,
     * then submit the form as shown here (i.e. without the "newsletter" field in the `$params` array).
     *
     * You can also emulate a JavaScript submission by not specifying any
     * buttons in the third parameter to submitForm.
     *
     * ```php
     * <?php
     * $I->submitForm(
     *     '#userForm',
     *     [
     *         'user' => [
     *             'login' => 'Davert',
     *             'password' => '123456',
     *             'agree' => true
     *         ]
     *     ]
     * );
     * ```
     *
     * This function works well when paired with `seeInFormFields()`
     * for quickly testing CRUD interfaces and form validation logic.
     *
     * ``` php
     * <?php
     * $form = [
     *      'field1' => 'value',
     *      'field2' => 'another value',
     *      'checkbox1' => true,
     *      // ...
     * ];
     * $I->submitForm('#my-form', $form, 'submitButton');
     * // $I->amOnPage('/path/to/form-page') may be needed
     * $I->seeInFormFields('#my-form', $form);
     * ```
     *
     * Parameter values can be set to arrays for multiple input fields
     * of the same name, or multi-select combo boxes.  For checkboxes,
     * you can use either the string value or boolean `true`/`false` which will
     * be replaced by the checkbox's value in the DOM.
     *
     * ``` php
     * <?php
     * $I->submitForm('#my-form', [
     *      'field1' => 'value',
     *      'checkbox' => [
     *          'value of first checkbox',
     *          'value of second checkbox',
     *      ],
     *      'otherCheckboxes' => [
     *          true,
     *          false,
     *          false
     *      ],
     *      'multiselect' => [
     *          'first option value',
     *          'second option value'
     *      ]
     * ]);
     * ```
     *
     * Mixing string and boolean values for a checkbox's value is not supported
     * and may produce unexpected results.
     *
     * Field names ending in `[]` must be passed without the trailing square
     * bracket characters, and must contain an array for its value.  This allows
     * submitting multiple values with the same name, consider:
     *
     * ```php
     * <?php
     * // This will NOT work correctly
     * $I->submitForm('#my-form', [
     *     'field[]' => 'value',
     *     'field[]' => 'another value',  // 'field[]' is already a defined key
     * ]);
     * ```
     *
     * The solution is to pass an array value:
     *
     * ```php
     * <?php
     * // This way both values are submitted
     * $I->submitForm('#my-form', [
     *     'field' => [
     *         'value',
     *         'another value',
     *     ]
     * ]);
     * ```
     *
     * @param $selector
     * @param $params
     * @param $button
     * @see \Codeception\Lib\InnerBrowser::submitForm()
     */
    public function submitForm($selector, array $params, $button = NULL) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('submitForm', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Submits the given form on the page, with the given form
     * values.  Pass the form field's values as an array in the second
     * parameter.
     *
     * Although this function can be used as a short-hand version of
     * `fillField()`, `selectOption()`, `click()` etc. it has some important
     * differences:
     *
     *  * Only field *names* may be used, not CSS/XPath selectors nor field labels
     *  * If a field is sent to this function that does *not* exist on the page,
     *    it will silently be added to the HTTP request.  This is helpful for testing
     *    some types of forms, but be aware that you will *not* get an exception
     *    like you would if you called `fillField()` or `selectOption()` with
     *    a missing field.
     *
     * Fields that are not provided will be filled by their values from the page,
     * or from any previous calls to `fillField()`, `selectOption()` etc.
     * You don't need to click the 'Submit' button afterwards.
     * This command itself triggers the request to form's action.
     *
     * You can optionally specify which button's value to include
     * in the request with the last parameter (as an alternative to
     * explicitly setting its value in the second parameter), as
     * button values are not otherwise included in the request.
     *
     * Examples:
     *
     * ``` php
     * <?php
     * $I->submitForm('#login', [
     *     'login' => 'davert',
     *     'password' => '123456'
     * ]);
     * // or
     * $I->submitForm('#login', [
     *     'login' => 'davert',
     *     'password' => '123456'
     * ], 'submitButtonName');
     *
     * ```
     *
     * For example, given this sample "Sign Up" form:
     *
     * ``` html
     * <form id="userForm">
     *     Login:
     *     <input type="text" name="user[login]" /><br/>
     *     Password:
     *     <input type="password" name="user[password]" /><br/>
     *     Do you agree to our terms?
     *     <input type="checkbox" name="user[agree]" /><br/>
     *     Subscribe to our newsletter?
     *     <input type="checkbox" name="user[newsletter]" value="1" checked="checked" /><br/>
     *     Select pricing plan:
     *     <select name="plan">
     *         <option value="1">Free</option>
     *         <option value="2" selected="selected">Paid</option>
     *     </select>
     *     <input type="submit" name="submitButton" value="Submit" />
     * </form>
     * ```
     *
     * You could write the following to submit it:
     *
     * ``` php
     * <?php
     * $I->submitForm(
     *     '#userForm',
     *     [
     *         'user' => [
     *             'login' => 'Davert',
     *             'password' => '123456',
     *             'agree' => true
     *         ]
     *     ],
     *     'submitButton'
     * );
     * ```
     * Note that "2" will be the submitted value for the "plan" field, as it is
     * the selected option.
     *
     * To uncheck the pre-checked checkbox "newsletter", call `$I->uncheckOption(['name' => 'user[newsletter]']);` *before*,
     * then submit the form as shown here (i.e. without the "newsletter" field in the `$params` array).
     *
     * You can also emulate a JavaScript submission by not specifying any
     * buttons in the third parameter to submitForm.
     *
     * ```php
     * <?php
     * $I->submitForm(
     *     '#userForm',
     *     [
     *         'user' => [
     *             'login' => 'Davert',
     *             'password' => '123456',
     *             'agree' => true
     *         ]
     *     ]
     * );
     * ```
     *
     * This function works well when paired with `seeInFormFields()`
     * for quickly testing CRUD interfaces and form validation logic.
     *
     * ``` php
     * <?php
     * $form = [
     *      'field1' => 'value',
     *      'field2' => 'another value',
     *      'checkbox1' => true,
     *      // ...
     * ];
     * $I->submitForm('#my-form', $form, 'submitButton');
     * // $I->amOnPage('/path/to/form-page') may be needed
     * $I->seeInFormFields('#my-form', $form);
     * ```
     *
     * Parameter values can be set to arrays for multiple input fields
     * of the same name, or multi-select combo boxes.  For checkboxes,
     * you can use either the string value or boolean `true`/`false` which will
     * be replaced by the checkbox's value in the DOM.
     *
     * ``` php
     * <?php
     * $I->submitForm('#my-form', [
     *      'field1' => 'value',
     *      'checkbox' => [
     *          'value of first checkbox',
     *          'value of second checkbox',
     *      ],
     *      'otherCheckboxes' => [
     *          true,
     *          false,
     *          false
     *      ],
     *      'multiselect' => [
     *          'first option value',
     *          'second option value'
     *      ]
     * ]);
     * ```
     *
     * Mixing string and boolean values for a checkbox's value is not supported
     * and may produce unexpected results.
     *
     * Field names ending in `[]` must be passed without the trailing square
     * bracket characters, and must contain an array for its value.  This allows
     * submitting multiple values with the same name, consider:
     *
     * ```php
     * <?php
     * // This will NOT work correctly
     * $I->submitForm('#my-form', [
     *     'field[]' => 'value',
     *     'field[]' => 'another value',  // 'field[]' is already a defined key
     * ]);
     * ```
     *
     * The solution is to pass an array value:
     *
     * ```php
     * <?php
     * // This way both values are submitted
     * $I->submitForm('#my-form', [
     *     'field' => [
     *         'value',
     *         'another value',
     *     ]
     * ]);
     * ```
     *
     * @param $selector
     * @param $params
     * @param $button
     * @see \Codeception\Lib\InnerBrowser::submitForm()
     */
    public function tryToSubmitForm($selector, array $params, $button = NULL) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('submitForm', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes submitForm and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::submitForm()
     */
    public function retrySubmitForm($selector, array $params, $button = NULL) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('submitForm', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Fills a text field or textarea with the given string.
     *
     * ``` php
     * <?php
     * $I->fillField("//input[@type='text']", "Hello World!");
     * $I->fillField(['name' => 'email'], 'jon@example.com');
     * ?>
     * ```
     *
     * @param $field
     * @param $value
     * @see \Codeception\Lib\InnerBrowser::fillField()
     */
    public function fillField($field, $value) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillField', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Fills a text field or textarea with the given string.
     *
     * ``` php
     * <?php
     * $I->fillField("//input[@type='text']", "Hello World!");
     * $I->fillField(['name' => 'email'], 'jon@example.com');
     * ?>
     * ```
     *
     * @param $field
     * @param $value
     * @see \Codeception\Lib\InnerBrowser::fillField()
     */
    public function tryToFillField($field, $value) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('fillField', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes fillField and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::fillField()
     */
    public function retryFillField($field, $value) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('fillField', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Selects an option in a select tag or in radio button group.
     *
     * ``` php
     * <?php
     * $I->selectOption('form select[name=account]', 'Premium');
     * $I->selectOption('form input[name=payment]', 'Monthly');
     * $I->selectOption('//form/select[@name=account]', 'Monthly');
     * ?>
     * ```
     *
     * Provide an array for the second argument to select multiple options:
     *
     * ``` php
     * <?php
     * $I->selectOption('Which OS do you use?', array('Windows','Linux'));
     * ?>
     * ```
     *
     * Or provide an associative array for the second argument to specifically define which selection method should be used:
     *
     * ``` php
     * <?php
     * $I->selectOption('Which OS do you use?', array('text' => 'Windows')); // Only search by text 'Windows'
     * $I->selectOption('Which OS do you use?', array('value' => 'windows')); // Only search by value 'windows'
     * ?>
     * ```
     *
     * @param $select
     * @param $option
     * @see \Codeception\Lib\InnerBrowser::selectOption()
     */
    public function selectOption($select, $option) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('selectOption', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Selects an option in a select tag or in radio button group.
     *
     * ``` php
     * <?php
     * $I->selectOption('form select[name=account]', 'Premium');
     * $I->selectOption('form input[name=payment]', 'Monthly');
     * $I->selectOption('//form/select[@name=account]', 'Monthly');
     * ?>
     * ```
     *
     * Provide an array for the second argument to select multiple options:
     *
     * ``` php
     * <?php
     * $I->selectOption('Which OS do you use?', array('Windows','Linux'));
     * ?>
     * ```
     *
     * Or provide an associative array for the second argument to specifically define which selection method should be used:
     *
     * ``` php
     * <?php
     * $I->selectOption('Which OS do you use?', array('text' => 'Windows')); // Only search by text 'Windows'
     * $I->selectOption('Which OS do you use?', array('value' => 'windows')); // Only search by value 'windows'
     * ?>
     * ```
     *
     * @param $select
     * @param $option
     * @see \Codeception\Lib\InnerBrowser::selectOption()
     */
    public function tryToSelectOption($select, $option) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('selectOption', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes selectOption and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::selectOption()
     */
    public function retrySelectOption($select, $option) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('selectOption', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Ticks a checkbox. For radio buttons, use the `selectOption` method instead.
     *
     * ``` php
     * <?php
     * $I->checkOption('#agree');
     * ?>
     * ```
     *
     * @param $option
     * @see \Codeception\Lib\InnerBrowser::checkOption()
     */
    public function checkOption($option) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('checkOption', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Ticks a checkbox. For radio buttons, use the `selectOption` method instead.
     *
     * ``` php
     * <?php
     * $I->checkOption('#agree');
     * ?>
     * ```
     *
     * @param $option
     * @see \Codeception\Lib\InnerBrowser::checkOption()
     */
    public function tryToCheckOption($option) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('checkOption', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes checkOption and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::checkOption()
     */
    public function retryCheckOption($option) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('checkOption', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Unticks a checkbox.
     *
     * ``` php
     * <?php
     * $I->uncheckOption('#notify');
     * ?>
     * ```
     *
     * @param $option
     * @see \Codeception\Lib\InnerBrowser::uncheckOption()
     */
    public function uncheckOption($option) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('uncheckOption', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Unticks a checkbox.
     *
     * ``` php
     * <?php
     * $I->uncheckOption('#notify');
     * ?>
     * ```
     *
     * @param $option
     * @see \Codeception\Lib\InnerBrowser::uncheckOption()
     */
    public function tryToUncheckOption($option) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('uncheckOption', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes uncheckOption and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::uncheckOption()
     */
    public function retryUncheckOption($option) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('uncheckOption', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Attaches a file relative to the Codeception `_data` directory to the given file upload field.
     *
     * ``` php
     * <?php
     * // file is stored in 'tests/_data/prices.xls'
     * $I->attachFile('input[@type="file"]', 'prices.xls');
     * ?>
     * ```
     *
     * @param $field
     * @param $filename
     * @see \Codeception\Lib\InnerBrowser::attachFile()
     */
    public function attachFile($field, $filename) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('attachFile', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Attaches a file relative to the Codeception `_data` directory to the given file upload field.
     *
     * ``` php
     * <?php
     * // file is stored in 'tests/_data/prices.xls'
     * $I->attachFile('input[@type="file"]', 'prices.xls');
     * ?>
     * ```
     *
     * @param $field
     * @param $filename
     * @see \Codeception\Lib\InnerBrowser::attachFile()
     */
    public function tryToAttachFile($field, $filename) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('attachFile', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes attachFile and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::attachFile()
     */
    public function retryAttachFile($field, $filename) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('attachFile', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sends an ajax GET request with the passed parameters.
     * See `sendAjaxPostRequest()`
     *
     * @param $uri
     * @param $params
     * @see \Codeception\Lib\InnerBrowser::sendAjaxGetRequest()
     */
    public function sendAjaxGetRequest($uri, $params = []) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('sendAjaxGetRequest', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Sends an ajax GET request with the passed parameters.
     * See `sendAjaxPostRequest()`
     *
     * @param $uri
     * @param $params
     * @see \Codeception\Lib\InnerBrowser::sendAjaxGetRequest()
     */
    public function tryToSendAjaxGetRequest($uri, $params = []) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('sendAjaxGetRequest', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes sendAjaxGetRequest and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::sendAjaxGetRequest()
     */
    public function retrySendAjaxGetRequest($uri, $params = []) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('sendAjaxGetRequest', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sends an ajax POST request with the passed parameters.
     * The appropriate HTTP header is added automatically:
     * `X-Requested-With: XMLHttpRequest`
     * Example:
     * ``` php
     * <?php
     * $I->sendAjaxPostRequest('/add-task', ['task' => 'lorem ipsum']);
     * ```
     * Some frameworks (e.g. Symfony) create field names in the form of an "array":
     * `<input type="text" name="form[task]">`
     * In this case you need to pass the fields like this:
     * ``` php
     * <?php
     * $I->sendAjaxPostRequest('/add-task', ['form' => [
     *     'task' => 'lorem ipsum',
     *     'category' => 'miscellaneous',
     * ]]);
     * ```
     *
     * @param string $uri
     * @param array $params
     * @see \Codeception\Lib\InnerBrowser::sendAjaxPostRequest()
     */
    public function sendAjaxPostRequest($uri, $params = []) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('sendAjaxPostRequest', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Sends an ajax POST request with the passed parameters.
     * The appropriate HTTP header is added automatically:
     * `X-Requested-With: XMLHttpRequest`
     * Example:
     * ``` php
     * <?php
     * $I->sendAjaxPostRequest('/add-task', ['task' => 'lorem ipsum']);
     * ```
     * Some frameworks (e.g. Symfony) create field names in the form of an "array":
     * `<input type="text" name="form[task]">`
     * In this case you need to pass the fields like this:
     * ``` php
     * <?php
     * $I->sendAjaxPostRequest('/add-task', ['form' => [
     *     'task' => 'lorem ipsum',
     *     'category' => 'miscellaneous',
     * ]]);
     * ```
     *
     * @param string $uri
     * @param array $params
     * @see \Codeception\Lib\InnerBrowser::sendAjaxPostRequest()
     */
    public function tryToSendAjaxPostRequest($uri, $params = []) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('sendAjaxPostRequest', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes sendAjaxPostRequest and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::sendAjaxPostRequest()
     */
    public function retrySendAjaxPostRequest($uri, $params = []) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('sendAjaxPostRequest', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sends an ajax request, using the passed HTTP method.
     * See `sendAjaxPostRequest()`
     * Example:
     * ``` php
     * <?php
     * $I->sendAjaxRequest('PUT', '/posts/7', ['title' => 'new title']);
     * ```
     *
     * @param $method
     * @param $uri
     * @param array $params
     * @see \Codeception\Lib\InnerBrowser::sendAjaxRequest()
     */
    public function sendAjaxRequest($method, $uri, $params = []) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('sendAjaxRequest', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Sends an ajax request, using the passed HTTP method.
     * See `sendAjaxPostRequest()`
     * Example:
     * ``` php
     * <?php
     * $I->sendAjaxRequest('PUT', '/posts/7', ['title' => 'new title']);
     * ```
     *
     * @param $method
     * @param $uri
     * @param array $params
     * @see \Codeception\Lib\InnerBrowser::sendAjaxRequest()
     */
    public function tryToSendAjaxRequest($method, $uri, $params = []) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('sendAjaxRequest', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes sendAjaxRequest and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::sendAjaxRequest()
     */
    public function retrySendAjaxRequest($method, $uri, $params = []) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('sendAjaxRequest', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Use this method within an [interactive pause](https://codeception.com/docs/02-GettingStarted#Interactive-Pause) to save the HTML source code of the current page.
     *
     * ```php
     * <?php
     * $I->makeHtmlSnapshot('edit_page');
     * // saved to: tests/_output/debug/edit_page.html
     * $I->makeHtmlSnapshot();
     * // saved to: tests/_output/debug/2017-05-26_14-24-11_4b3403665fea6.html
     * ```
     *
     * @param null $name
     * @see \Codeception\Lib\InnerBrowser::makeHtmlSnapshot()
     */
    public function makeHtmlSnapshot($name = NULL) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('makeHtmlSnapshot', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Use this method within an [interactive pause](https://codeception.com/docs/02-GettingStarted#Interactive-Pause) to save the HTML source code of the current page.
     *
     * ```php
     * <?php
     * $I->makeHtmlSnapshot('edit_page');
     * // saved to: tests/_output/debug/edit_page.html
     * $I->makeHtmlSnapshot();
     * // saved to: tests/_output/debug/2017-05-26_14-24-11_4b3403665fea6.html
     * ```
     *
     * @param null $name
     * @see \Codeception\Lib\InnerBrowser::makeHtmlSnapshot()
     */
    public function tryToMakeHtmlSnapshot($name = NULL) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('makeHtmlSnapshot', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes makeHtmlSnapshot and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::makeHtmlSnapshot()
     */
    public function retryMakeHtmlSnapshot($name = NULL) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('makeHtmlSnapshot', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Finds and returns the text contents of the given element.
     * If a fuzzy locator is used, the element is found using CSS, XPath,
     * and by matching the full page source by regular expression.
     *
     * ``` php
     * <?php
     * $heading = $I->grabTextFrom('h1');
     * $heading = $I->grabTextFrom('descendant-or-self::h1');
     * $value = $I->grabTextFrom('~<input value=(.*?)]~sgi'); // match with a regex
     * ?>
     * ```
     *
     * @param $cssOrXPathOrRegex
     *
     * @return mixed
     * @see \Codeception\Lib\InnerBrowser::grabTextFrom()
     */
    public function grabTextFrom($cssOrXPathOrRegex) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabTextFrom', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes grabTextFrom and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::grabTextFrom()
     */
    public function retryGrabTextFrom($cssOrXPathOrRegex) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('grabTextFrom', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Grabs the value of the given attribute value from the given element.
     * Fails if element is not found.
     *
     * ``` php
     * <?php
     * $I->grabAttributeFrom('#tooltip', 'title');
     * ?>
     * ```
     *
     *
     * @param $cssOrXpath
     * @param $attribute
     *
     * @return mixed
     * @see \Codeception\Lib\InnerBrowser::grabAttributeFrom()
     */
    public function grabAttributeFrom($cssOrXpath, $attribute) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabAttributeFrom', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes grabAttributeFrom and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::grabAttributeFrom()
     */
    public function retryGrabAttributeFrom($cssOrXpath, $attribute) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('grabAttributeFrom', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Grabs either the text content, or attribute values, of nodes
     * matched by $cssOrXpath and returns them as an array.
     *
     * ```html
     * <a href="#first">First</a>
     * <a href="#second">Second</a>
     * <a href="#third">Third</a>
     * ```
     *
     * ```php
     * <?php
     * // would return ['First', 'Second', 'Third']
     * $aLinkText = $I->grabMultiple('a');
     *
     * // would return ['#first', '#second', '#third']
     * $aLinks = $I->grabMultiple('a', 'href');
     * ?>
     * ```
     *
     * @param $cssOrXpath
     * @param $attribute
     * @return string[]
     * @see \Codeception\Lib\InnerBrowser::grabMultiple()
     */
    public function grabMultiple($cssOrXpath, $attribute = NULL) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabMultiple', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes grabMultiple and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::grabMultiple()
     */
    public function retryGrabMultiple($cssOrXpath, $attribute = NULL) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('grabMultiple', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param $field
     *
     * @return array|mixed|null|string
     * @see \Codeception\Lib\InnerBrowser::grabValueFrom()
     */
    public function grabValueFrom($field) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabValueFrom', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes grabValueFrom and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::grabValueFrom()
     */
    public function retryGrabValueFrom($field) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('grabValueFrom', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sets a cookie with the given name and value.
     * You can set additional cookie params like `domain`, `path`, `expires`, `secure` in array passed as last argument.
     *
     * ``` php
     * <?php
     * $I->setCookie('PHPSESSID', 'el4ukv0kqbvoirg7nkp4dncpk3');
     * ?>
     * ```
     *
     * @param $name
     * @param $val
     * @param array $params
     *
     * @return mixed
     * @see \Codeception\Lib\InnerBrowser::setCookie()
     */
    public function setCookie($name, $val, array $params = []) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setCookie', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Sets a cookie with the given name and value.
     * You can set additional cookie params like `domain`, `path`, `expires`, `secure` in array passed as last argument.
     *
     * ``` php
     * <?php
     * $I->setCookie('PHPSESSID', 'el4ukv0kqbvoirg7nkp4dncpk3');
     * ?>
     * ```
     *
     * @param $name
     * @param $val
     * @param array $params
     *
     * @return mixed
     * @see \Codeception\Lib\InnerBrowser::setCookie()
     */
    public function tryToSetCookie($name, $val, array $params = []) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('setCookie', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes setCookie and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::setCookie()
     */
    public function retrySetCookie($name, $val, array $params = []) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('setCookie', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Grabs a cookie value.
     * You can set additional cookie params like `domain`, `path` in array passed as last argument.
     * If the cookie is set by an ajax request (XMLHttpRequest), there might be some delay caused by the browser, so try `$I->wait(0.1)`.
     *
     * @param $cookie
     *
     * @param array $params
     * @return mixed
     * @see \Codeception\Lib\InnerBrowser::grabCookie()
     */
    public function grabCookie($cookie, array $params = []) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabCookie', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes grabCookie and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::grabCookie()
     */
    public function retryGrabCookie($cookie, array $params = []) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('grabCookie', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Grabs current page source code.
     *
     * @throws ModuleException if no page was opened.
     * @return string Current page source code.
     * @see \Codeception\Lib\InnerBrowser::grabPageSource()
     */
    public function grabPageSource() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabPageSource', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes grabPageSource and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::grabPageSource()
     */
    public function retryGrabPageSource() {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('grabPageSource', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that a cookie with the given name is set.
     * You can set additional cookie params like `domain`, `path` as array passed in last argument.
     *
     * ``` php
     * <?php
     * $I->seeCookie('PHPSESSID');
     * ?>
     * ```
     *
     * @param $cookie
     * @param array $params
     * @return mixed
     * @see \Codeception\Lib\InnerBrowser::seeCookie()
     */
    public function seeCookie($cookie, array $params = []) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeCookie', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that a cookie with the given name is set.
     * You can set additional cookie params like `domain`, `path` as array passed in last argument.
     *
     * ``` php
     * <?php
     * $I->seeCookie('PHPSESSID');
     * ?>
     * ```
     *
     * @param $cookie
     * @param array $params
     * @return mixed
     * @see \Codeception\Lib\InnerBrowser::seeCookie()
     */
    public function tryToSeeCookie($cookie, array $params = []) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('seeCookie', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes seeCookie and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::seeCookie()
     */
    public function retrySeeCookie($cookie, array $params = []) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('seeCookie', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that a cookie with the given name is set.
     * You can set additional cookie params like `domain`, `path` as array passed in last argument.
     *
     * ``` php
     * <?php
     * $I->seeCookie('PHPSESSID');
     * ?>
     * ```
     *
     * @param $cookie
     * @param array $params
     * @return mixed
     * @see \Codeception\Lib\InnerBrowser::seeCookie()
     */
    public function canSeeCookie($cookie, array $params = []) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeCookie', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that there isn't a cookie with the given name.
     * You can set additional cookie params like `domain`, `path` as array passed in last argument.
     *
     * @param $cookie
     *
     * @param array $params
     * @return mixed
     * @see \Codeception\Lib\InnerBrowser::dontSeeCookie()
     */
    public function dontSeeCookie($cookie, array $params = []) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeCookie', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that there isn't a cookie with the given name.
     * You can set additional cookie params like `domain`, `path` as array passed in last argument.
     *
     * @param $cookie
     *
     * @param array $params
     * @return mixed
     * @see \Codeception\Lib\InnerBrowser::dontSeeCookie()
     */
    public function tryToDontSeeCookie($cookie, array $params = []) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('dontSeeCookie', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes dontSeeCookie and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::dontSeeCookie()
     */
    public function retryDontSeeCookie($cookie, array $params = []) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('dontSeeCookie', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that there isn't a cookie with the given name.
     * You can set additional cookie params like `domain`, `path` as array passed in last argument.
     *
     * @param $cookie
     *
     * @param array $params
     * @return mixed
     * @see \Codeception\Lib\InnerBrowser::dontSeeCookie()
     */
    public function cantSeeCookie($cookie, array $params = []) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeCookie', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Unsets cookie with the given name.
     * You can set additional cookie params like `domain`, `path` in array passed as last argument.
     *
     * @param $cookie
     *
     * @param array $params
     * @return mixed
     * @see \Codeception\Lib\InnerBrowser::resetCookie()
     */
    public function resetCookie($cookie, array $params = []) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('resetCookie', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Unsets cookie with the given name.
     * You can set additional cookie params like `domain`, `path` in array passed as last argument.
     *
     * @param $cookie
     *
     * @param array $params
     * @return mixed
     * @see \Codeception\Lib\InnerBrowser::resetCookie()
     */
    public function tryToResetCookie($cookie, array $params = []) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('resetCookie', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes resetCookie and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::resetCookie()
     */
    public function retryResetCookie($cookie, array $params = []) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('resetCookie', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the given element exists on the page and is visible.
     * You can also specify expected attributes of this element.
     *
     * ``` php
     * <?php
     * $I->seeElement('.error');
     * $I->seeElement('//form/input[1]');
     * $I->seeElement('input', ['name' => 'login']);
     * $I->seeElement('input', ['value' => '123456']);
     *
     * // strict locator in first arg, attributes in second
     * $I->seeElement(['css' => 'form input'], ['name' => 'login']);
     * ?>
     * ```
     *
     * @param $selector
     * @param array $attributes
     * @return
     * @see \Codeception\Lib\InnerBrowser::seeElement()
     */
    public function seeElement($selector, $attributes = []) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeElement', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that the given element exists on the page and is visible.
     * You can also specify expected attributes of this element.
     *
     * ``` php
     * <?php
     * $I->seeElement('.error');
     * $I->seeElement('//form/input[1]');
     * $I->seeElement('input', ['name' => 'login']);
     * $I->seeElement('input', ['value' => '123456']);
     *
     * // strict locator in first arg, attributes in second
     * $I->seeElement(['css' => 'form input'], ['name' => 'login']);
     * ?>
     * ```
     *
     * @param $selector
     * @param array $attributes
     * @return
     * @see \Codeception\Lib\InnerBrowser::seeElement()
     */
    public function tryToSeeElement($selector, $attributes = []) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('seeElement', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes seeElement and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::seeElement()
     */
    public function retrySeeElement($selector, $attributes = []) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('seeElement', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the given element exists on the page and is visible.
     * You can also specify expected attributes of this element.
     *
     * ``` php
     * <?php
     * $I->seeElement('.error');
     * $I->seeElement('//form/input[1]');
     * $I->seeElement('input', ['name' => 'login']);
     * $I->seeElement('input', ['value' => '123456']);
     *
     * // strict locator in first arg, attributes in second
     * $I->seeElement(['css' => 'form input'], ['name' => 'login']);
     * ?>
     * ```
     *
     * @param $selector
     * @param array $attributes
     * @return
     * @see \Codeception\Lib\InnerBrowser::seeElement()
     */
    public function canSeeElement($selector, $attributes = []) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeElement', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the given element is invisible or not present on the page.
     * You can also specify expected attributes of this element.
     *
     * ``` php
     * <?php
     * $I->dontSeeElement('.error');
     * $I->dontSeeElement('//form/input[1]');
     * $I->dontSeeElement('input', ['name' => 'login']);
     * $I->dontSeeElement('input', ['value' => '123456']);
     * ?>
     * ```
     *
     * @param $selector
     * @param array $attributes
     * @see \Codeception\Lib\InnerBrowser::dontSeeElement()
     */
    public function dontSeeElement($selector, $attributes = []) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeElement', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that the given element is invisible or not present on the page.
     * You can also specify expected attributes of this element.
     *
     * ``` php
     * <?php
     * $I->dontSeeElement('.error');
     * $I->dontSeeElement('//form/input[1]');
     * $I->dontSeeElement('input', ['name' => 'login']);
     * $I->dontSeeElement('input', ['value' => '123456']);
     * ?>
     * ```
     *
     * @param $selector
     * @param array $attributes
     * @see \Codeception\Lib\InnerBrowser::dontSeeElement()
     */
    public function tryToDontSeeElement($selector, $attributes = []) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('dontSeeElement', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes dontSeeElement and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::dontSeeElement()
     */
    public function retryDontSeeElement($selector, $attributes = []) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('dontSeeElement', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the given element is invisible or not present on the page.
     * You can also specify expected attributes of this element.
     *
     * ``` php
     * <?php
     * $I->dontSeeElement('.error');
     * $I->dontSeeElement('//form/input[1]');
     * $I->dontSeeElement('input', ['name' => 'login']);
     * $I->dontSeeElement('input', ['value' => '123456']);
     * ?>
     * ```
     *
     * @param $selector
     * @param array $attributes
     * @see \Codeception\Lib\InnerBrowser::dontSeeElement()
     */
    public function cantSeeElement($selector, $attributes = []) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeElement', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that there are a certain number of elements matched by the given locator on the page.
     *
     * ``` php
     * <?php
     * $I->seeNumberOfElements('tr', 10);
     * $I->seeNumberOfElements('tr', [0,10]); // between 0 and 10 elements
     * ?>
     * ```
     * @param $selector
     * @param mixed $expected int or int[]
     * @see \Codeception\Lib\InnerBrowser::seeNumberOfElements()
     */
    public function seeNumberOfElements($selector, $expected) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeNumberOfElements', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that there are a certain number of elements matched by the given locator on the page.
     *
     * ``` php
     * <?php
     * $I->seeNumberOfElements('tr', 10);
     * $I->seeNumberOfElements('tr', [0,10]); // between 0 and 10 elements
     * ?>
     * ```
     * @param $selector
     * @param mixed $expected int or int[]
     * @see \Codeception\Lib\InnerBrowser::seeNumberOfElements()
     */
    public function tryToSeeNumberOfElements($selector, $expected) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('seeNumberOfElements', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes seeNumberOfElements and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::seeNumberOfElements()
     */
    public function retrySeeNumberOfElements($selector, $expected) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('seeNumberOfElements', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that there are a certain number of elements matched by the given locator on the page.
     *
     * ``` php
     * <?php
     * $I->seeNumberOfElements('tr', 10);
     * $I->seeNumberOfElements('tr', [0,10]); // between 0 and 10 elements
     * ?>
     * ```
     * @param $selector
     * @param mixed $expected int or int[]
     * @see \Codeception\Lib\InnerBrowser::seeNumberOfElements()
     */
    public function canSeeNumberOfElements($selector, $expected) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeNumberOfElements', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the given option is selected.
     *
     * ``` php
     * <?php
     * $I->seeOptionIsSelected('#form input[name=payment]', 'Visa');
     * ?>
     * ```
     *
     * @param $selector
     * @param $optionText
     *
     * @return mixed
     * @see \Codeception\Lib\InnerBrowser::seeOptionIsSelected()
     */
    public function seeOptionIsSelected($selector, $optionText) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeOptionIsSelected', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that the given option is selected.
     *
     * ``` php
     * <?php
     * $I->seeOptionIsSelected('#form input[name=payment]', 'Visa');
     * ?>
     * ```
     *
     * @param $selector
     * @param $optionText
     *
     * @return mixed
     * @see \Codeception\Lib\InnerBrowser::seeOptionIsSelected()
     */
    public function tryToSeeOptionIsSelected($selector, $optionText) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('seeOptionIsSelected', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes seeOptionIsSelected and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::seeOptionIsSelected()
     */
    public function retrySeeOptionIsSelected($selector, $optionText) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('seeOptionIsSelected', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the given option is selected.
     *
     * ``` php
     * <?php
     * $I->seeOptionIsSelected('#form input[name=payment]', 'Visa');
     * ?>
     * ```
     *
     * @param $selector
     * @param $optionText
     *
     * @return mixed
     * @see \Codeception\Lib\InnerBrowser::seeOptionIsSelected()
     */
    public function canSeeOptionIsSelected($selector, $optionText) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeOptionIsSelected', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the given option is not selected.
     *
     * ``` php
     * <?php
     * $I->dontSeeOptionIsSelected('#form input[name=payment]', 'Visa');
     * ?>
     * ```
     *
     * @param $selector
     * @param $optionText
     *
     * @return mixed
     * @see \Codeception\Lib\InnerBrowser::dontSeeOptionIsSelected()
     */
    public function dontSeeOptionIsSelected($selector, $optionText) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeOptionIsSelected', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that the given option is not selected.
     *
     * ``` php
     * <?php
     * $I->dontSeeOptionIsSelected('#form input[name=payment]', 'Visa');
     * ?>
     * ```
     *
     * @param $selector
     * @param $optionText
     *
     * @return mixed
     * @see \Codeception\Lib\InnerBrowser::dontSeeOptionIsSelected()
     */
    public function tryToDontSeeOptionIsSelected($selector, $optionText) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('dontSeeOptionIsSelected', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes dontSeeOptionIsSelected and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::dontSeeOptionIsSelected()
     */
    public function retryDontSeeOptionIsSelected($selector, $optionText) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('dontSeeOptionIsSelected', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the given option is not selected.
     *
     * ``` php
     * <?php
     * $I->dontSeeOptionIsSelected('#form input[name=payment]', 'Visa');
     * ?>
     * ```
     *
     * @param $selector
     * @param $optionText
     *
     * @return mixed
     * @see \Codeception\Lib\InnerBrowser::dontSeeOptionIsSelected()
     */
    public function cantSeeOptionIsSelected($selector, $optionText) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeOptionIsSelected', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that current page has 404 response status code.
     * @see \Codeception\Lib\InnerBrowser::seePageNotFound()
     */
    public function seePageNotFound() {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seePageNotFound', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that current page has 404 response status code.
     * @see \Codeception\Lib\InnerBrowser::seePageNotFound()
     */
    public function tryToSeePageNotFound() {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('seePageNotFound', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes seePageNotFound and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::seePageNotFound()
     */
    public function retrySeePageNotFound() {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('seePageNotFound', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Asserts that current page has 404 response status code.
     * @see \Codeception\Lib\InnerBrowser::seePageNotFound()
     */
    public function canSeePageNotFound() {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seePageNotFound', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that response code is equal to value provided.
     *
     * ```php
     * <?php
     * $I->seeResponseCodeIs(200);
     *
     * // recommended \Codeception\Util\HttpCode
     * $I->seeResponseCodeIs(\Codeception\Util\HttpCode::OK);
     * ```
     *
     * @param int $code
     * @see \Codeception\Lib\InnerBrowser::seeResponseCodeIs()
     */
    public function seeResponseCodeIs($code) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResponseCodeIs', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that response code is equal to value provided.
     *
     * ```php
     * <?php
     * $I->seeResponseCodeIs(200);
     *
     * // recommended \Codeception\Util\HttpCode
     * $I->seeResponseCodeIs(\Codeception\Util\HttpCode::OK);
     * ```
     *
     * @param int $code
     * @see \Codeception\Lib\InnerBrowser::seeResponseCodeIs()
     */
    public function tryToSeeResponseCodeIs($code) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('seeResponseCodeIs', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes seeResponseCodeIs and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::seeResponseCodeIs()
     */
    public function retrySeeResponseCodeIs($code) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('seeResponseCodeIs', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that response code is equal to value provided.
     *
     * ```php
     * <?php
     * $I->seeResponseCodeIs(200);
     *
     * // recommended \Codeception\Util\HttpCode
     * $I->seeResponseCodeIs(\Codeception\Util\HttpCode::OK);
     * ```
     *
     * @param int $code
     * @see \Codeception\Lib\InnerBrowser::seeResponseCodeIs()
     */
    public function canSeeResponseCodeIs($code) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResponseCodeIs', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that response code is between a certain range. Between actually means [from <= CODE <= to]
     *
     * @param int $from
     * @param int $to
     * @see \Codeception\Lib\InnerBrowser::seeResponseCodeIsBetween()
     */
    public function seeResponseCodeIsBetween($from, $to) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResponseCodeIsBetween', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that response code is between a certain range. Between actually means [from <= CODE <= to]
     *
     * @param int $from
     * @param int $to
     * @see \Codeception\Lib\InnerBrowser::seeResponseCodeIsBetween()
     */
    public function tryToSeeResponseCodeIsBetween($from, $to) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('seeResponseCodeIsBetween', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes seeResponseCodeIsBetween and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::seeResponseCodeIsBetween()
     */
    public function retrySeeResponseCodeIsBetween($from, $to) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('seeResponseCodeIsBetween', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that response code is between a certain range. Between actually means [from <= CODE <= to]
     *
     * @param int $from
     * @param int $to
     * @see \Codeception\Lib\InnerBrowser::seeResponseCodeIsBetween()
     */
    public function canSeeResponseCodeIsBetween($from, $to) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResponseCodeIsBetween', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that response code is equal to value provided.
     *
     * ```php
     * <?php
     * $I->dontSeeResponseCodeIs(200);
     *
     * // recommended \Codeception\Util\HttpCode
     * $I->dontSeeResponseCodeIs(\Codeception\Util\HttpCode::OK);
     * ```
     * @param int $code
     * @see \Codeception\Lib\InnerBrowser::dontSeeResponseCodeIs()
     */
    public function dontSeeResponseCodeIs($code) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeResponseCodeIs', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that response code is equal to value provided.
     *
     * ```php
     * <?php
     * $I->dontSeeResponseCodeIs(200);
     *
     * // recommended \Codeception\Util\HttpCode
     * $I->dontSeeResponseCodeIs(\Codeception\Util\HttpCode::OK);
     * ```
     * @param int $code
     * @see \Codeception\Lib\InnerBrowser::dontSeeResponseCodeIs()
     */
    public function tryToDontSeeResponseCodeIs($code) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('dontSeeResponseCodeIs', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes dontSeeResponseCodeIs and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::dontSeeResponseCodeIs()
     */
    public function retryDontSeeResponseCodeIs($code) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('dontSeeResponseCodeIs', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that response code is equal to value provided.
     *
     * ```php
     * <?php
     * $I->dontSeeResponseCodeIs(200);
     *
     * // recommended \Codeception\Util\HttpCode
     * $I->dontSeeResponseCodeIs(\Codeception\Util\HttpCode::OK);
     * ```
     * @param int $code
     * @see \Codeception\Lib\InnerBrowser::dontSeeResponseCodeIs()
     */
    public function cantSeeResponseCodeIs($code) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeResponseCodeIs', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the response code 2xx
     * @see \Codeception\Lib\InnerBrowser::seeResponseCodeIsSuccessful()
     */
    public function seeResponseCodeIsSuccessful() {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResponseCodeIsSuccessful', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that the response code 2xx
     * @see \Codeception\Lib\InnerBrowser::seeResponseCodeIsSuccessful()
     */
    public function tryToSeeResponseCodeIsSuccessful() {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('seeResponseCodeIsSuccessful', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes seeResponseCodeIsSuccessful and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::seeResponseCodeIsSuccessful()
     */
    public function retrySeeResponseCodeIsSuccessful() {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('seeResponseCodeIsSuccessful', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the response code 2xx
     * @see \Codeception\Lib\InnerBrowser::seeResponseCodeIsSuccessful()
     */
    public function canSeeResponseCodeIsSuccessful() {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResponseCodeIsSuccessful', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the response code 3xx
     * @see \Codeception\Lib\InnerBrowser::seeResponseCodeIsRedirection()
     */
    public function seeResponseCodeIsRedirection() {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResponseCodeIsRedirection', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that the response code 3xx
     * @see \Codeception\Lib\InnerBrowser::seeResponseCodeIsRedirection()
     */
    public function tryToSeeResponseCodeIsRedirection() {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('seeResponseCodeIsRedirection', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes seeResponseCodeIsRedirection and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::seeResponseCodeIsRedirection()
     */
    public function retrySeeResponseCodeIsRedirection() {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('seeResponseCodeIsRedirection', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the response code 3xx
     * @see \Codeception\Lib\InnerBrowser::seeResponseCodeIsRedirection()
     */
    public function canSeeResponseCodeIsRedirection() {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResponseCodeIsRedirection', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the response code is 4xx
     * @see \Codeception\Lib\InnerBrowser::seeResponseCodeIsClientError()
     */
    public function seeResponseCodeIsClientError() {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResponseCodeIsClientError', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that the response code is 4xx
     * @see \Codeception\Lib\InnerBrowser::seeResponseCodeIsClientError()
     */
    public function tryToSeeResponseCodeIsClientError() {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('seeResponseCodeIsClientError', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes seeResponseCodeIsClientError and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::seeResponseCodeIsClientError()
     */
    public function retrySeeResponseCodeIsClientError() {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('seeResponseCodeIsClientError', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the response code is 4xx
     * @see \Codeception\Lib\InnerBrowser::seeResponseCodeIsClientError()
     */
    public function canSeeResponseCodeIsClientError() {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResponseCodeIsClientError', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the response code is 5xx
     * @see \Codeception\Lib\InnerBrowser::seeResponseCodeIsServerError()
     */
    public function seeResponseCodeIsServerError() {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResponseCodeIsServerError', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that the response code is 5xx
     * @see \Codeception\Lib\InnerBrowser::seeResponseCodeIsServerError()
     */
    public function tryToSeeResponseCodeIsServerError() {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('seeResponseCodeIsServerError', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes seeResponseCodeIsServerError and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::seeResponseCodeIsServerError()
     */
    public function retrySeeResponseCodeIsServerError() {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('seeResponseCodeIsServerError', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the response code is 5xx
     * @see \Codeception\Lib\InnerBrowser::seeResponseCodeIsServerError()
     */
    public function canSeeResponseCodeIsServerError() {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResponseCodeIsServerError', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the page title contains the given string.
     *
     * ``` php
     * <?php
     * $I->seeInTitle('Blog - Post #1');
     * ?>
     * ```
     *
     * @param $title
     *
     * @return mixed
     * @see \Codeception\Lib\InnerBrowser::seeInTitle()
     */
    public function seeInTitle($title) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeInTitle', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that the page title contains the given string.
     *
     * ``` php
     * <?php
     * $I->seeInTitle('Blog - Post #1');
     * ?>
     * ```
     *
     * @param $title
     *
     * @return mixed
     * @see \Codeception\Lib\InnerBrowser::seeInTitle()
     */
    public function tryToSeeInTitle($title) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('seeInTitle', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes seeInTitle and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::seeInTitle()
     */
    public function retrySeeInTitle($title) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('seeInTitle', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the page title contains the given string.
     *
     * ``` php
     * <?php
     * $I->seeInTitle('Blog - Post #1');
     * ?>
     * ```
     *
     * @param $title
     *
     * @return mixed
     * @see \Codeception\Lib\InnerBrowser::seeInTitle()
     */
    public function canSeeInTitle($title) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeInTitle', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the page title does not contain the given string.
     *
     * @param $title
     *
     * @return mixed
     * @see \Codeception\Lib\InnerBrowser::dontSeeInTitle()
     */
    public function dontSeeInTitle($title) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeInTitle', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Checks that the page title does not contain the given string.
     *
     * @param $title
     *
     * @return mixed
     * @see \Codeception\Lib\InnerBrowser::dontSeeInTitle()
     */
    public function tryToDontSeeInTitle($title) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('dontSeeInTitle', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes dontSeeInTitle and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::dontSeeInTitle()
     */
    public function retryDontSeeInTitle($title) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('dontSeeInTitle', func_get_args(), $retryNum, $retryInterval));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the page title does not contain the given string.
     *
     * @param $title
     *
     * @return mixed
     * @see \Codeception\Lib\InnerBrowser::dontSeeInTitle()
     */
    public function cantSeeInTitle($title) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeInTitle', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Switch to iframe or frame on the page.
     *
     * Example:
     * ``` html
     * <iframe name="another_frame" src="http://example.com">
     * ```
     *
     * ``` php
     * <?php
     * # switch to iframe
     * $I->switchToIframe("another_frame");
     * ```
     *
     * @param string $name
     * @see \Codeception\Lib\InnerBrowser::switchToIframe()
     */
    public function switchToIframe($name) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('switchToIframe', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Switch to iframe or frame on the page.
     *
     * Example:
     * ``` html
     * <iframe name="another_frame" src="http://example.com">
     * ```
     *
     * ``` php
     * <?php
     * # switch to iframe
     * $I->switchToIframe("another_frame");
     * ```
     *
     * @param string $name
     * @see \Codeception\Lib\InnerBrowser::switchToIframe()
     */
    public function tryToSwitchToIframe($name) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('switchToIframe', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes switchToIframe and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::switchToIframe()
     */
    public function retrySwitchToIframe($name) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('switchToIframe', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Moves back in history.
     *
     * @param int $numberOfSteps (default value 1)
     * @see \Codeception\Lib\InnerBrowser::moveBack()
     */
    public function moveBack($numberOfSteps = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('moveBack', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Moves back in history.
     *
     * @param int $numberOfSteps (default value 1)
     * @see \Codeception\Lib\InnerBrowser::moveBack()
     */
    public function tryToMoveBack($numberOfSteps = 1) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('moveBack', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes moveBack and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::moveBack()
     */
    public function retryMoveBack($numberOfSteps = 1) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('moveBack', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sets SERVER parameters valid for all next requests.
     * this will remove old ones.
     *
     * ```php
     * $I->setServerParameters([]);
     * ```
     * @see \Codeception\Lib\InnerBrowser::setServerParameters()
     */
    public function setServerParameters(array $params) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setServerParameters', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Sets SERVER parameters valid for all next requests.
     * this will remove old ones.
     *
     * ```php
     * $I->setServerParameters([]);
     * ```
     * @see \Codeception\Lib\InnerBrowser::setServerParameters()
     */
    public function tryToSetServerParameters(array $params) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('setServerParameters', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes setServerParameters and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::setServerParameters()
     */
    public function retrySetServerParameters(array $params) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('setServerParameters', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sets SERVER parameter valid for all next requests.
     *
     * ```php
     * $I->haveServerParameter('name', 'value');
     * ```
     * @param string $name
     * @param string $value
     * @see \Codeception\Lib\InnerBrowser::haveServerParameter()
     */
    public function haveServerParameter($name, $value) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('haveServerParameter', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Prevents automatic redirects to be followed by the client.
     *
     * ```php
     * <?php
     * $I->stopFollowingRedirects();
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::stopFollowingRedirects()
     */
    public function stopFollowingRedirects() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('stopFollowingRedirects', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Prevents automatic redirects to be followed by the client.
     *
     * ```php
     * <?php
     * $I->stopFollowingRedirects();
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::stopFollowingRedirects()
     */
    public function tryToStopFollowingRedirects() {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('stopFollowingRedirects', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes stopFollowingRedirects and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::stopFollowingRedirects()
     */
    public function retryStopFollowingRedirects() {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('stopFollowingRedirects', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Enables automatic redirects to be followed by the client.
     *
     * ```php
     * <?php
     * $I->startFollowingRedirects();
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::startFollowingRedirects()
     */
    public function startFollowingRedirects() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('startFollowingRedirects', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Enables automatic redirects to be followed by the client.
     *
     * ```php
     * <?php
     * $I->startFollowingRedirects();
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::startFollowingRedirects()
     */
    public function tryToStartFollowingRedirects() {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('startFollowingRedirects', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes startFollowingRedirects and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::startFollowingRedirects()
     */
    public function retryStartFollowingRedirects() {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('startFollowingRedirects', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Follow pending redirect if there is one.
     *
     * ```php
     * <?php
     * $I->followRedirect();
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::followRedirect()
     */
    public function followRedirect() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('followRedirect', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Follow pending redirect if there is one.
     *
     * ```php
     * <?php
     * $I->followRedirect();
     * ```
     *
     * @see \Codeception\Lib\InnerBrowser::followRedirect()
     */
    public function tryToFollowRedirect() {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('followRedirect', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes followRedirect and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::followRedirect()
     */
    public function retryFollowRedirect() {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('followRedirect', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sets the maximum number of redirects that the Client can follow.
     *
     * ```php
     * <?php
     * $I->setMaxRedirects(2);
     * ```
     *
     * @param int $maxRedirects
     * @see \Codeception\Lib\InnerBrowser::setMaxRedirects()
     */
    public function setMaxRedirects($maxRedirects) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setMaxRedirects', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Sets the maximum number of redirects that the Client can follow.
     *
     * ```php
     * <?php
     * $I->setMaxRedirects(2);
     * ```
     *
     * @param int $maxRedirects
     * @see \Codeception\Lib\InnerBrowser::setMaxRedirects()
     */
    public function tryToSetMaxRedirects($maxRedirects) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('setMaxRedirects', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes setMaxRedirects and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Lib\InnerBrowser::setMaxRedirects()
     */
    public function retrySetMaxRedirects($maxRedirects) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('setMaxRedirects', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Handles and checks exception called inside callback function.
     * Either exception class name or exception instance should be provided.
     *
     * ```php
     * <?php
     * $I->expectException(MyException::class, function() {
     *     $this->doSomethingBad();
     * });
     *
     * $I->expectException(new MyException(), function() {
     *     $this->doSomethingBad();
     * });
     * ```
     * If you want to check message or exception code, you can pass them with exception instance:
     * ```php
     * <?php
     * // will check that exception MyException is thrown with "Don't do bad things" message
     * $I->expectException(new MyException("Don't do bad things"), function() {
     *     $this->doSomethingBad();
     * });
     * ```
     *
     * @deprecated Use expectThrowable() instead
     * @param \Exception|string $exception
     * @param callable $callback
     * @see \Codeception\Module\Asserts::expectException()
     */
    public function expectException($exception, $callback) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('expectException', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Handles and checks exception called inside callback function.
     * Either exception class name or exception instance should be provided.
     *
     * ```php
     * <?php
     * $I->expectException(MyException::class, function() {
     *     $this->doSomethingBad();
     * });
     *
     * $I->expectException(new MyException(), function() {
     *     $this->doSomethingBad();
     * });
     * ```
     * If you want to check message or exception code, you can pass them with exception instance:
     * ```php
     * <?php
     * // will check that exception MyException is thrown with "Don't do bad things" message
     * $I->expectException(new MyException("Don't do bad things"), function() {
     *     $this->doSomethingBad();
     * });
     * ```
     *
     * @deprecated Use expectThrowable() instead
     * @param \Exception|string $exception
     * @param callable $callback
     * @see \Codeception\Module\Asserts::expectException()
     */
    public function tryToExpectException($exception, $callback) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('expectException', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes expectException and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\Asserts::expectException()
     */
    public function retryExpectException($exception, $callback) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('expectException', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Handles and checks throwables (Exceptions/Errors) called inside the callback function.
     * Either throwable class name or throwable instance should be provided.
     *
     * ```php
     * <?php
     * $I->expectThrowable(MyThrowable::class, function() {
     *     $this->doSomethingBad();
     * });
     *
     * $I->expectThrowable(new MyException(), function() {
     *     $this->doSomethingBad();
     * });
     * ```
     * If you want to check message or throwable code, you can pass them with throwable instance:
     * ```php
     * <?php
     * // will check that throwable MyError is thrown with "Don't do bad things" message
     * $I->expectThrowable(new MyError("Don't do bad things"), function() {
     *     $this->doSomethingBad();
     * });
     * ```
     *
     * @param \Throwable|string $throwable
     * @param callable $callback
     * @see \Codeception\Module\Asserts::expectThrowable()
     */
    public function expectThrowable($throwable, $callback) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('expectThrowable', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Handles and checks throwables (Exceptions/Errors) called inside the callback function.
     * Either throwable class name or throwable instance should be provided.
     *
     * ```php
     * <?php
     * $I->expectThrowable(MyThrowable::class, function() {
     *     $this->doSomethingBad();
     * });
     *
     * $I->expectThrowable(new MyException(), function() {
     *     $this->doSomethingBad();
     * });
     * ```
     * If you want to check message or throwable code, you can pass them with throwable instance:
     * ```php
     * <?php
     * // will check that throwable MyError is thrown with "Don't do bad things" message
     * $I->expectThrowable(new MyError("Don't do bad things"), function() {
     *     $this->doSomethingBad();
     * });
     * ```
     *
     * @param \Throwable|string $throwable
     * @param callable $callback
     * @see \Codeception\Module\Asserts::expectThrowable()
     */
    public function tryToExpectThrowable($throwable, $callback) {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('expectThrowable', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes expectThrowable and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\Asserts::expectThrowable()
     */
    public function retryExpectThrowable($throwable, $callback) {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('expectThrowable', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a file does not exist.
     *
     * @param string $filename
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileNotExists()
     */
    public function assertFileNotExists($filename, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertFileNotExists', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a file does not exist.
     *
     * @param string $filename
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileNotExists()
     */
    public function tryToAssertFileNotExists($filename, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertFileNotExists', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertFileNotExists and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertFileNotExists()
     */
    public function retryAssertFileNotExists($filename, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertFileNotExists', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a value is greater than or equal to another value.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertGreaterOrEquals()
     */
    public function assertGreaterOrEquals($expected, $actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertGreaterOrEquals', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a value is greater than or equal to another value.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertGreaterOrEquals()
     */
    public function tryToAssertGreaterOrEquals($expected, $actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertGreaterOrEquals', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertGreaterOrEquals and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertGreaterOrEquals()
     */
    public function retryAssertGreaterOrEquals($expected, $actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertGreaterOrEquals', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is empty.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsEmpty()
     */
    public function assertIsEmpty($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsEmpty', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is empty.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsEmpty()
     */
    public function tryToAssertIsEmpty($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsEmpty', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsEmpty and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsEmpty()
     */
    public function retryAssertIsEmpty($actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsEmpty', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a value is smaller than or equal to another value.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertLessOrEquals()
     */
    public function assertLessOrEquals($expected, $actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertLessOrEquals', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a value is smaller than or equal to another value.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertLessOrEquals()
     */
    public function tryToAssertLessOrEquals($expected, $actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertLessOrEquals', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertLessOrEquals and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertLessOrEquals()
     */
    public function retryAssertLessOrEquals($expected, $actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertLessOrEquals', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a string does not match a given regular expression.
     *
     * @param string $pattern
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotRegExp()
     */
    public function assertNotRegExp($pattern, $string, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotRegExp', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a string does not match a given regular expression.
     *
     * @param string $pattern
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotRegExp()
     */
    public function tryToAssertNotRegExp($pattern, $string, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertNotRegExp', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertNotRegExp and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotRegExp()
     */
    public function retryAssertNotRegExp($pattern, $string, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertNotRegExp', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a string matches a given regular expression.
     *
     * @param string $pattern
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertRegExp()
     */
    public function assertRegExp($pattern, $string, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertRegExp', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a string matches a given regular expression.
     *
     * @param string $pattern
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertRegExp()
     */
    public function tryToAssertRegExp($pattern, $string, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertRegExp', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertRegExp and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertRegExp()
     */
    public function retryAssertRegExp($pattern, $string, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertRegExp', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Evaluates a PHPUnit\Framework\Constraint matcher object.
     *
     * @param $value
     * @param Constraint $constraint
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertThatItsNot()
     */
    public function assertThatItsNot($value, $constraint, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertThatItsNot', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Evaluates a PHPUnit\Framework\Constraint matcher object.
     *
     * @param $value
     * @param Constraint $constraint
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertThatItsNot()
     */
    public function tryToAssertThatItsNot($value, $constraint, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertThatItsNot', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertThatItsNot and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertThatItsNot()
     */
    public function retryAssertThatItsNot($value, $constraint, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertThatItsNot', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that an array has a specified key.
     *
     * @param int|string $key
     * @param array|ArrayAccess $array
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertArrayHasKey()
     */
    public function assertArrayHasKey($key, $array, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertArrayHasKey', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that an array has a specified key.
     *
     * @param int|string $key
     * @param array|ArrayAccess $array
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertArrayHasKey()
     */
    public function tryToAssertArrayHasKey($key, $array, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertArrayHasKey', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertArrayHasKey and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertArrayHasKey()
     */
    public function retryAssertArrayHasKey($key, $array, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertArrayHasKey', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that an array does not have a specified key.
     *
     * @param int|string $key
     * @param array|ArrayAccess $array
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertArrayNotHasKey()
     */
    public function assertArrayNotHasKey($key, $array, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertArrayNotHasKey', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that an array does not have a specified key.
     *
     * @param int|string $key
     * @param array|ArrayAccess $array
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertArrayNotHasKey()
     */
    public function tryToAssertArrayNotHasKey($key, $array, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertArrayNotHasKey', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertArrayNotHasKey and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertArrayNotHasKey()
     */
    public function retryAssertArrayNotHasKey($key, $array, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertArrayNotHasKey', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a class has a specified attribute.
     *
     * @param string $attributeName
     * @param string $className
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertClassHasAttribute()
     */
    public function assertClassHasAttribute($attributeName, $className, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertClassHasAttribute', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a class has a specified attribute.
     *
     * @param string $attributeName
     * @param string $className
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertClassHasAttribute()
     */
    public function tryToAssertClassHasAttribute($attributeName, $className, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertClassHasAttribute', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertClassHasAttribute and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertClassHasAttribute()
     */
    public function retryAssertClassHasAttribute($attributeName, $className, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertClassHasAttribute', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a class has a specified static attribute.
     *
     * @param string $attributeName
     * @param string $className
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertClassHasStaticAttribute()
     */
    public function assertClassHasStaticAttribute($attributeName, $className, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertClassHasStaticAttribute', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a class has a specified static attribute.
     *
     * @param string $attributeName
     * @param string $className
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertClassHasStaticAttribute()
     */
    public function tryToAssertClassHasStaticAttribute($attributeName, $className, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertClassHasStaticAttribute', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertClassHasStaticAttribute and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertClassHasStaticAttribute()
     */
    public function retryAssertClassHasStaticAttribute($attributeName, $className, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertClassHasStaticAttribute', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a class does not have a specified attribute.
     *
     * @param string $attributeName
     * @param string $className
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertClassNotHasAttribute()
     */
    public function assertClassNotHasAttribute($attributeName, $className, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertClassNotHasAttribute', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a class does not have a specified attribute.
     *
     * @param string $attributeName
     * @param string $className
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertClassNotHasAttribute()
     */
    public function tryToAssertClassNotHasAttribute($attributeName, $className, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertClassNotHasAttribute', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertClassNotHasAttribute and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertClassNotHasAttribute()
     */
    public function retryAssertClassNotHasAttribute($attributeName, $className, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertClassNotHasAttribute', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a class does not have a specified static attribute.
     *
     * @param string $attributeName
     * @param string $className
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertClassNotHasStaticAttribute()
     */
    public function assertClassNotHasStaticAttribute($attributeName, $className, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertClassNotHasStaticAttribute', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a class does not have a specified static attribute.
     *
     * @param string $attributeName
     * @param string $className
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertClassNotHasStaticAttribute()
     */
    public function tryToAssertClassNotHasStaticAttribute($attributeName, $className, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertClassNotHasStaticAttribute', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertClassNotHasStaticAttribute and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertClassNotHasStaticAttribute()
     */
    public function retryAssertClassNotHasStaticAttribute($attributeName, $className, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertClassNotHasStaticAttribute', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a haystack contains a needle.
     *
     * @param $needle
     * @param $haystack
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertContains()
     */
    public function assertContains($needle, $haystack, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertContains', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a haystack contains a needle.
     *
     * @param $needle
     * @param $haystack
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertContains()
     */
    public function tryToAssertContains($needle, $haystack, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertContains', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertContains and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertContains()
     */
    public function retryAssertContains($needle, $haystack, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertContains', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param $needle
     * @param $haystack
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertContainsEquals()
     */
    public function assertContainsEquals($needle, $haystack, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertContainsEquals', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * @param $needle
     * @param $haystack
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertContainsEquals()
     */
    public function tryToAssertContainsEquals($needle, $haystack, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertContainsEquals', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertContainsEquals and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertContainsEquals()
     */
    public function retryAssertContainsEquals($needle, $haystack, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertContainsEquals', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a haystack contains only values of a given type.
     *
     * @param string $type
     * @param $haystack
     * @param bool|null $isNativeType
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertContainsOnly()
     */
    public function assertContainsOnly($type, $haystack, $isNativeType = NULL, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertContainsOnly', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a haystack contains only values of a given type.
     *
     * @param string $type
     * @param $haystack
     * @param bool|null $isNativeType
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertContainsOnly()
     */
    public function tryToAssertContainsOnly($type, $haystack, $isNativeType = NULL, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertContainsOnly', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertContainsOnly and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertContainsOnly()
     */
    public function retryAssertContainsOnly($type, $haystack, $isNativeType = NULL, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertContainsOnly', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a haystack contains only instances of a given class name.
     *
     * @param string $className
     * @param $haystack
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertContainsOnlyInstancesOf()
     */
    public function assertContainsOnlyInstancesOf($className, $haystack, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertContainsOnlyInstancesOf', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a haystack contains only instances of a given class name.
     *
     * @param string $className
     * @param $haystack
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertContainsOnlyInstancesOf()
     */
    public function tryToAssertContainsOnlyInstancesOf($className, $haystack, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertContainsOnlyInstancesOf', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertContainsOnlyInstancesOf and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertContainsOnlyInstancesOf()
     */
    public function retryAssertContainsOnlyInstancesOf($className, $haystack, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertContainsOnlyInstancesOf', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts the number of elements of an array, Countable or Traversable.
     *
     * @param int $expectedCount
     * @param Countable|iterable $haystack
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertCount()
     */
    public function assertCount($expectedCount, $haystack, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertCount', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts the number of elements of an array, Countable or Traversable.
     *
     * @param int $expectedCount
     * @param Countable|iterable $haystack
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertCount()
     */
    public function tryToAssertCount($expectedCount, $haystack, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertCount', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertCount and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertCount()
     */
    public function retryAssertCount($expectedCount, $haystack, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertCount', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a directory does not exist.
     *
     * @param string $directory
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertDirectoryDoesNotExist()
     */
    public function assertDirectoryDoesNotExist($directory, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertDirectoryDoesNotExist', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a directory does not exist.
     *
     * @param string $directory
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertDirectoryDoesNotExist()
     */
    public function tryToAssertDirectoryDoesNotExist($directory, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertDirectoryDoesNotExist', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertDirectoryDoesNotExist and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertDirectoryDoesNotExist()
     */
    public function retryAssertDirectoryDoesNotExist($directory, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertDirectoryDoesNotExist', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a directory exists.
     *
     * @param string $directory
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertDirectoryExists()
     */
    public function assertDirectoryExists($directory, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertDirectoryExists', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a directory exists.
     *
     * @param string $directory
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertDirectoryExists()
     */
    public function tryToAssertDirectoryExists($directory, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertDirectoryExists', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertDirectoryExists and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertDirectoryExists()
     */
    public function retryAssertDirectoryExists($directory, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertDirectoryExists', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a directory exists and is not readable.
     *
     * @param string $directory
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertDirectoryIsNotReadable()
     */
    public function assertDirectoryIsNotReadable($directory, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertDirectoryIsNotReadable', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a directory exists and is not readable.
     *
     * @param string $directory
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertDirectoryIsNotReadable()
     */
    public function tryToAssertDirectoryIsNotReadable($directory, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertDirectoryIsNotReadable', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertDirectoryIsNotReadable and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertDirectoryIsNotReadable()
     */
    public function retryAssertDirectoryIsNotReadable($directory, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertDirectoryIsNotReadable', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a directory exists and is not writable.
     *
     * @param string $directory
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertDirectoryIsNotWritable()
     */
    public function assertDirectoryIsNotWritable($directory, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertDirectoryIsNotWritable', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a directory exists and is not writable.
     *
     * @param string $directory
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertDirectoryIsNotWritable()
     */
    public function tryToAssertDirectoryIsNotWritable($directory, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertDirectoryIsNotWritable', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertDirectoryIsNotWritable and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertDirectoryIsNotWritable()
     */
    public function retryAssertDirectoryIsNotWritable($directory, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertDirectoryIsNotWritable', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a directory exists and is readable.
     *
     * @param string $directory
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertDirectoryIsReadable()
     */
    public function assertDirectoryIsReadable($directory, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertDirectoryIsReadable', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a directory exists and is readable.
     *
     * @param string $directory
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertDirectoryIsReadable()
     */
    public function tryToAssertDirectoryIsReadable($directory, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertDirectoryIsReadable', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertDirectoryIsReadable and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertDirectoryIsReadable()
     */
    public function retryAssertDirectoryIsReadable($directory, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertDirectoryIsReadable', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a directory exists and is writable.
     *
     * @param string $directory
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertDirectoryIsWritable()
     */
    public function assertDirectoryIsWritable($directory, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertDirectoryIsWritable', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a directory exists and is writable.
     *
     * @param string $directory
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertDirectoryIsWritable()
     */
    public function tryToAssertDirectoryIsWritable($directory, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertDirectoryIsWritable', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertDirectoryIsWritable and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertDirectoryIsWritable()
     */
    public function retryAssertDirectoryIsWritable($directory, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertDirectoryIsWritable', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a string does not match a given regular expression.
     *
     * @param string $pattern
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertDoesNotMatchRegularExpression()
     */
    public function assertDoesNotMatchRegularExpression($pattern, $string, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertDoesNotMatchRegularExpression', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a string does not match a given regular expression.
     *
     * @param string $pattern
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertDoesNotMatchRegularExpression()
     */
    public function tryToAssertDoesNotMatchRegularExpression($pattern, $string, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertDoesNotMatchRegularExpression', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertDoesNotMatchRegularExpression and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertDoesNotMatchRegularExpression()
     */
    public function retryAssertDoesNotMatchRegularExpression($pattern, $string, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertDoesNotMatchRegularExpression', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is empty.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertEmpty()
     */
    public function assertEmpty($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertEmpty', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is empty.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertEmpty()
     */
    public function tryToAssertEmpty($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertEmpty', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertEmpty and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertEmpty()
     */
    public function retryAssertEmpty($actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertEmpty', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two variables are equal.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertEquals()
     */
    public function assertEquals($expected, $actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertEquals', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that two variables are equal.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertEquals()
     */
    public function tryToAssertEquals($expected, $actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertEquals', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertEquals and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertEquals()
     */
    public function retryAssertEquals($expected, $actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertEquals', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two variables are equal (canonicalizing).
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertEqualsCanonicalizing()
     */
    public function assertEqualsCanonicalizing($expected, $actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertEqualsCanonicalizing', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that two variables are equal (canonicalizing).
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertEqualsCanonicalizing()
     */
    public function tryToAssertEqualsCanonicalizing($expected, $actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertEqualsCanonicalizing', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertEqualsCanonicalizing and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertEqualsCanonicalizing()
     */
    public function retryAssertEqualsCanonicalizing($expected, $actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertEqualsCanonicalizing', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two variables are equal (ignoring case).
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertEqualsIgnoringCase()
     */
    public function assertEqualsIgnoringCase($expected, $actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertEqualsIgnoringCase', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that two variables are equal (ignoring case).
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertEqualsIgnoringCase()
     */
    public function tryToAssertEqualsIgnoringCase($expected, $actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertEqualsIgnoringCase', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertEqualsIgnoringCase and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertEqualsIgnoringCase()
     */
    public function retryAssertEqualsIgnoringCase($expected, $actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertEqualsIgnoringCase', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two variables are equal (with delta).
     *
     * @param $expected
     * @param $actual
     * @param float $delta
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertEqualsWithDelta()
     */
    public function assertEqualsWithDelta($expected, $actual, $delta, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertEqualsWithDelta', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that two variables are equal (with delta).
     *
     * @param $expected
     * @param $actual
     * @param float $delta
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertEqualsWithDelta()
     */
    public function tryToAssertEqualsWithDelta($expected, $actual, $delta, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertEqualsWithDelta', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertEqualsWithDelta and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertEqualsWithDelta()
     */
    public function retryAssertEqualsWithDelta($expected, $actual, $delta, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertEqualsWithDelta', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a condition is false.
     *
     * @param $condition
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFalse()
     */
    public function assertFalse($condition, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertFalse', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a condition is false.
     *
     * @param $condition
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFalse()
     */
    public function tryToAssertFalse($condition, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertFalse', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertFalse and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertFalse()
     */
    public function retryAssertFalse($condition, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertFalse', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a file does not exist.
     *
     * @param string $filename
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileDoesNotExist()
     */
    public function assertFileDoesNotExist($filename, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertFileDoesNotExist', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a file does not exist.
     *
     * @param string $filename
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileDoesNotExist()
     */
    public function tryToAssertFileDoesNotExist($filename, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertFileDoesNotExist', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertFileDoesNotExist and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertFileDoesNotExist()
     */
    public function retryAssertFileDoesNotExist($filename, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertFileDoesNotExist', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the contents of one file is equal to the contents of another file.
     *
     * @param string $expected
     * @param string $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileEquals()
     */
    public function assertFileEquals($expected, $actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertFileEquals', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that the contents of one file is equal to the contents of another file.
     *
     * @param string $expected
     * @param string $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileEquals()
     */
    public function tryToAssertFileEquals($expected, $actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertFileEquals', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertFileEquals and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertFileEquals()
     */
    public function retryAssertFileEquals($expected, $actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertFileEquals', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the contents of one file is equal to the contents of another file (canonicalizing).
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileEqualsCanonicalizing()
     */
    public function assertFileEqualsCanonicalizing($expected, $actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertFileEqualsCanonicalizing', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that the contents of one file is equal to the contents of another file (canonicalizing).
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileEqualsCanonicalizing()
     */
    public function tryToAssertFileEqualsCanonicalizing($expected, $actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertFileEqualsCanonicalizing', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertFileEqualsCanonicalizing and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertFileEqualsCanonicalizing()
     */
    public function retryAssertFileEqualsCanonicalizing($expected, $actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertFileEqualsCanonicalizing', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the contents of one file is equal to the contents of another file (ignoring case).
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileEqualsIgnoringCase()
     */
    public function assertFileEqualsIgnoringCase($expected, $actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertFileEqualsIgnoringCase', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that the contents of one file is equal to the contents of another file (ignoring case).
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileEqualsIgnoringCase()
     */
    public function tryToAssertFileEqualsIgnoringCase($expected, $actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertFileEqualsIgnoringCase', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertFileEqualsIgnoringCase and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertFileEqualsIgnoringCase()
     */
    public function retryAssertFileEqualsIgnoringCase($expected, $actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertFileEqualsIgnoringCase', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a file exists.
     *
     * @param string $filename
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileExists()
     */
    public function assertFileExists($filename, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertFileExists', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a file exists.
     *
     * @param string $filename
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileExists()
     */
    public function tryToAssertFileExists($filename, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertFileExists', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertFileExists and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertFileExists()
     */
    public function retryAssertFileExists($filename, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertFileExists', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a file exists and is not readable.
     *
     * @param string $file
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileIsNotReadable()
     */
    public function assertFileIsNotReadable($file, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertFileIsNotReadable', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a file exists and is not readable.
     *
     * @param string $file
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileIsNotReadable()
     */
    public function tryToAssertFileIsNotReadable($file, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertFileIsNotReadable', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertFileIsNotReadable and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertFileIsNotReadable()
     */
    public function retryAssertFileIsNotReadable($file, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertFileIsNotReadable', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a file exists and is not writable.
     *
     * @param string $file
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileIsNotWritable()
     */
    public function assertFileIsNotWritable($file, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertFileIsNotWritable', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a file exists and is not writable.
     *
     * @param string $file
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileIsNotWritable()
     */
    public function tryToAssertFileIsNotWritable($file, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertFileIsNotWritable', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertFileIsNotWritable and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertFileIsNotWritable()
     */
    public function retryAssertFileIsNotWritable($file, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertFileIsNotWritable', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a file exists and is readable.
     *
     * @param string $file
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileIsReadable()
     */
    public function assertFileIsReadable($file, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertFileIsReadable', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a file exists and is readable.
     *
     * @param string $file
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileIsReadable()
     */
    public function tryToAssertFileIsReadable($file, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertFileIsReadable', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertFileIsReadable and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertFileIsReadable()
     */
    public function retryAssertFileIsReadable($file, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertFileIsReadable', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a file exists and is writable.
     *
     * @param string $file
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileIsWritable()
     */
    public function assertFileIsWritable($file, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertFileIsWritable', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a file exists and is writable.
     *
     * @param string $file
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileIsWritable()
     */
    public function tryToAssertFileIsWritable($file, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertFileIsWritable', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertFileIsWritable and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertFileIsWritable()
     */
    public function retryAssertFileIsWritable($file, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertFileIsWritable', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the contents of one file is not equal to the contents of another file.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileNotEquals()
     */
    public function assertFileNotEquals($expected, $actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertFileNotEquals', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that the contents of one file is not equal to the contents of another file.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileNotEquals()
     */
    public function tryToAssertFileNotEquals($expected, $actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertFileNotEquals', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertFileNotEquals and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertFileNotEquals()
     */
    public function retryAssertFileNotEquals($expected, $actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertFileNotEquals', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the contents of one file is not equal to the contents of another file (canonicalizing).
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileNotEqualsCanonicalizing()
     */
    public function assertFileNotEqualsCanonicalizing($expected, $actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertFileNotEqualsCanonicalizing', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that the contents of one file is not equal to the contents of another file (canonicalizing).
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileNotEqualsCanonicalizing()
     */
    public function tryToAssertFileNotEqualsCanonicalizing($expected, $actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertFileNotEqualsCanonicalizing', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertFileNotEqualsCanonicalizing and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertFileNotEqualsCanonicalizing()
     */
    public function retryAssertFileNotEqualsCanonicalizing($expected, $actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertFileNotEqualsCanonicalizing', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the contents of one file is not equal to the contents of another file (ignoring case).
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileNotEqualsIgnoringCase()
     */
    public function assertFileNotEqualsIgnoringCase($expected, $actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertFileNotEqualsIgnoringCase', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that the contents of one file is not equal to the contents of another file (ignoring case).
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFileNotEqualsIgnoringCase()
     */
    public function tryToAssertFileNotEqualsIgnoringCase($expected, $actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertFileNotEqualsIgnoringCase', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertFileNotEqualsIgnoringCase and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertFileNotEqualsIgnoringCase()
     */
    public function retryAssertFileNotEqualsIgnoringCase($expected, $actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertFileNotEqualsIgnoringCase', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is finite.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFinite()
     */
    public function assertFinite($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertFinite', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is finite.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertFinite()
     */
    public function tryToAssertFinite($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertFinite', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertFinite and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertFinite()
     */
    public function retryAssertFinite($actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertFinite', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a value is greater than another value.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertGreaterThan()
     */
    public function assertGreaterThan($expected, $actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertGreaterThan', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a value is greater than another value.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertGreaterThan()
     */
    public function tryToAssertGreaterThan($expected, $actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertGreaterThan', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertGreaterThan and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertGreaterThan()
     */
    public function retryAssertGreaterThan($expected, $actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertGreaterThan', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a value is greater than or equal to another value.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertGreaterThanOrEqual()
     */
    public function assertGreaterThanOrEqual($expected, $actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertGreaterThanOrEqual', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a value is greater than or equal to another value.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertGreaterThanOrEqual()
     */
    public function tryToAssertGreaterThanOrEqual($expected, $actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertGreaterThanOrEqual', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertGreaterThanOrEqual and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertGreaterThanOrEqual()
     */
    public function retryAssertGreaterThanOrEqual($expected, $actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertGreaterThanOrEqual', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is infinite.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertInfinite()
     */
    public function assertInfinite($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertInfinite', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is infinite.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertInfinite()
     */
    public function tryToAssertInfinite($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertInfinite', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertInfinite and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertInfinite()
     */
    public function retryAssertInfinite($actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertInfinite', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is of a given type.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertInstanceOf()
     */
    public function assertInstanceOf($expected, $actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertInstanceOf', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is of a given type.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertInstanceOf()
     */
    public function tryToAssertInstanceOf($expected, $actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertInstanceOf', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertInstanceOf and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertInstanceOf()
     */
    public function retryAssertInstanceOf($expected, $actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertInstanceOf', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is of type array.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsArray()
     */
    public function assertIsArray($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsArray', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is of type array.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsArray()
     */
    public function tryToAssertIsArray($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsArray', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsArray and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsArray()
     */
    public function retryAssertIsArray($actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsArray', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is of type bool.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsBool()
     */
    public function assertIsBool($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsBool', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is of type bool.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsBool()
     */
    public function tryToAssertIsBool($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsBool', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsBool and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsBool()
     */
    public function retryAssertIsBool($actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsBool', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is of type callable.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsCallable()
     */
    public function assertIsCallable($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsCallable', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is of type callable.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsCallable()
     */
    public function tryToAssertIsCallable($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsCallable', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsCallable and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsCallable()
     */
    public function retryAssertIsCallable($actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsCallable', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is of type resource and is closed.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsClosedResource()
     */
    public function assertIsClosedResource($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsClosedResource', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is of type resource and is closed.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsClosedResource()
     */
    public function tryToAssertIsClosedResource($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsClosedResource', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsClosedResource and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsClosedResource()
     */
    public function retryAssertIsClosedResource($actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsClosedResource', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is of type float.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsFloat()
     */
    public function assertIsFloat($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsFloat', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is of type float.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsFloat()
     */
    public function tryToAssertIsFloat($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsFloat', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsFloat and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsFloat()
     */
    public function retryAssertIsFloat($actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsFloat', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is of type int.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsInt()
     */
    public function assertIsInt($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsInt', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is of type int.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsInt()
     */
    public function tryToAssertIsInt($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsInt', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsInt and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsInt()
     */
    public function retryAssertIsInt($actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsInt', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is of type iterable.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsIterable()
     */
    public function assertIsIterable($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsIterable', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is of type iterable.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsIterable()
     */
    public function tryToAssertIsIterable($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsIterable', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsIterable and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsIterable()
     */
    public function retryAssertIsIterable($actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsIterable', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is not of type array.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotArray()
     */
    public function assertIsNotArray($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsNotArray', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is not of type array.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotArray()
     */
    public function tryToAssertIsNotArray($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsNotArray', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsNotArray and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsNotArray()
     */
    public function retryAssertIsNotArray($actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsNotArray', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is not of type bool.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotBool()
     */
    public function assertIsNotBool($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsNotBool', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is not of type bool.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotBool()
     */
    public function tryToAssertIsNotBool($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsNotBool', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsNotBool and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsNotBool()
     */
    public function retryAssertIsNotBool($actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsNotBool', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is not of type callable.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotCallable()
     */
    public function assertIsNotCallable($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsNotCallable', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is not of type callable.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotCallable()
     */
    public function tryToAssertIsNotCallable($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsNotCallable', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsNotCallable and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsNotCallable()
     */
    public function retryAssertIsNotCallable($actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsNotCallable', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is not of type resource.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotClosedResource()
     */
    public function assertIsNotClosedResource($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsNotClosedResource', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is not of type resource.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotClosedResource()
     */
    public function tryToAssertIsNotClosedResource($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsNotClosedResource', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsNotClosedResource and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsNotClosedResource()
     */
    public function retryAssertIsNotClosedResource($actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsNotClosedResource', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is not of type float.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotFloat()
     */
    public function assertIsNotFloat($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsNotFloat', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is not of type float.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotFloat()
     */
    public function tryToAssertIsNotFloat($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsNotFloat', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsNotFloat and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsNotFloat()
     */
    public function retryAssertIsNotFloat($actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsNotFloat', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is not of type int.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotInt()
     */
    public function assertIsNotInt($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsNotInt', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is not of type int.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotInt()
     */
    public function tryToAssertIsNotInt($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsNotInt', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsNotInt and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsNotInt()
     */
    public function retryAssertIsNotInt($actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsNotInt', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is not of type iterable.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotIterable()
     */
    public function assertIsNotIterable($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsNotIterable', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is not of type iterable.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotIterable()
     */
    public function tryToAssertIsNotIterable($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsNotIterable', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsNotIterable and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsNotIterable()
     */
    public function retryAssertIsNotIterable($actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsNotIterable', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is not of type numeric.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotNumeric()
     */
    public function assertIsNotNumeric($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsNotNumeric', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is not of type numeric.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotNumeric()
     */
    public function tryToAssertIsNotNumeric($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsNotNumeric', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsNotNumeric and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsNotNumeric()
     */
    public function retryAssertIsNotNumeric($actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsNotNumeric', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is not of type object.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotObject()
     */
    public function assertIsNotObject($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsNotObject', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is not of type object.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotObject()
     */
    public function tryToAssertIsNotObject($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsNotObject', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsNotObject and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsNotObject()
     */
    public function retryAssertIsNotObject($actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsNotObject', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a file/dir exists and is not readable.
     *
     * @param string $filename
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotReadable()
     */
    public function assertIsNotReadable($filename, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsNotReadable', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a file/dir exists and is not readable.
     *
     * @param string $filename
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotReadable()
     */
    public function tryToAssertIsNotReadable($filename, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsNotReadable', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsNotReadable and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsNotReadable()
     */
    public function retryAssertIsNotReadable($filename, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsNotReadable', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is not of type resource.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotResource()
     */
    public function assertIsNotResource($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsNotResource', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is not of type resource.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotResource()
     */
    public function tryToAssertIsNotResource($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsNotResource', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsNotResource and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsNotResource()
     */
    public function retryAssertIsNotResource($actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsNotResource', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is not of type scalar.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotScalar()
     */
    public function assertIsNotScalar($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsNotScalar', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is not of type scalar.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotScalar()
     */
    public function tryToAssertIsNotScalar($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsNotScalar', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsNotScalar and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsNotScalar()
     */
    public function retryAssertIsNotScalar($actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsNotScalar', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is not of type string.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotString()
     */
    public function assertIsNotString($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsNotString', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is not of type string.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotString()
     */
    public function tryToAssertIsNotString($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsNotString', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsNotString and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsNotString()
     */
    public function retryAssertIsNotString($actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsNotString', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a file/dir exists and is not writable.
     *
     * @param $filename
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotWritable()
     */
    public function assertIsNotWritable($filename, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsNotWritable', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a file/dir exists and is not writable.
     *
     * @param $filename
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNotWritable()
     */
    public function tryToAssertIsNotWritable($filename, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsNotWritable', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsNotWritable and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsNotWritable()
     */
    public function retryAssertIsNotWritable($filename, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsNotWritable', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is of type numeric.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNumeric()
     */
    public function assertIsNumeric($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsNumeric', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is of type numeric.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsNumeric()
     */
    public function tryToAssertIsNumeric($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsNumeric', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsNumeric and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsNumeric()
     */
    public function retryAssertIsNumeric($actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsNumeric', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is of type object.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsObject()
     */
    public function assertIsObject($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsObject', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is of type object.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsObject()
     */
    public function tryToAssertIsObject($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsObject', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsObject and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsObject()
     */
    public function retryAssertIsObject($actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsObject', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a file/dir is readable.
     *
     * @param $filename
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsReadable()
     */
    public function assertIsReadable($filename, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsReadable', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a file/dir is readable.
     *
     * @param $filename
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsReadable()
     */
    public function tryToAssertIsReadable($filename, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsReadable', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsReadable and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsReadable()
     */
    public function retryAssertIsReadable($filename, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsReadable', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is of type resource.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsResource()
     */
    public function assertIsResource($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsResource', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is of type resource.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsResource()
     */
    public function tryToAssertIsResource($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsResource', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsResource and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsResource()
     */
    public function retryAssertIsResource($actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsResource', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is of type scalar.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsScalar()
     */
    public function assertIsScalar($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsScalar', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is of type scalar.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsScalar()
     */
    public function tryToAssertIsScalar($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsScalar', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsScalar and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsScalar()
     */
    public function retryAssertIsScalar($actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsScalar', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is of type string.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsString()
     */
    public function assertIsString($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsString', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is of type string.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsString()
     */
    public function tryToAssertIsString($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsString', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsString and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsString()
     */
    public function retryAssertIsString($actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsString', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a file/dir exists and is writable.
     *
     * @param $filename
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsWritable()
     */
    public function assertIsWritable($filename, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsWritable', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a file/dir exists and is writable.
     *
     * @param $filename
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertIsWritable()
     */
    public function tryToAssertIsWritable($filename, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertIsWritable', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertIsWritable and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertIsWritable()
     */
    public function retryAssertIsWritable($filename, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertIsWritable', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a string is a valid JSON string.
     *
     * @param string $actualJson
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertJson()
     */
    public function assertJson($actualJson, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertJson', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a string is a valid JSON string.
     *
     * @param string $actualJson
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertJson()
     */
    public function tryToAssertJson($actualJson, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertJson', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertJson and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertJson()
     */
    public function retryAssertJson($actualJson, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertJson', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two JSON files are equal.
     *
     * @param string $expectedFile
     * @param string $actualFile
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertJsonFileEqualsJsonFile()
     */
    public function assertJsonFileEqualsJsonFile($expectedFile, $actualFile, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertJsonFileEqualsJsonFile', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that two JSON files are equal.
     *
     * @param string $expectedFile
     * @param string $actualFile
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertJsonFileEqualsJsonFile()
     */
    public function tryToAssertJsonFileEqualsJsonFile($expectedFile, $actualFile, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertJsonFileEqualsJsonFile', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertJsonFileEqualsJsonFile and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertJsonFileEqualsJsonFile()
     */
    public function retryAssertJsonFileEqualsJsonFile($expectedFile, $actualFile, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertJsonFileEqualsJsonFile', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two JSON files are not equal.
     *
     * @param string $expectedFile
     * @param string $actualFile
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertJsonFileNotEqualsJsonFile()
     */
    public function assertJsonFileNotEqualsJsonFile($expectedFile, $actualFile, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertJsonFileNotEqualsJsonFile', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that two JSON files are not equal.
     *
     * @param string $expectedFile
     * @param string $actualFile
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertJsonFileNotEqualsJsonFile()
     */
    public function tryToAssertJsonFileNotEqualsJsonFile($expectedFile, $actualFile, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertJsonFileNotEqualsJsonFile', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertJsonFileNotEqualsJsonFile and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertJsonFileNotEqualsJsonFile()
     */
    public function retryAssertJsonFileNotEqualsJsonFile($expectedFile, $actualFile, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertJsonFileNotEqualsJsonFile', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the generated JSON encoded object and the content of the given file are equal.
     *
     * @param string $expectedFile
     * @param string $actualJson
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertJsonStringEqualsJsonFile()
     */
    public function assertJsonStringEqualsJsonFile($expectedFile, $actualJson, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertJsonStringEqualsJsonFile', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that the generated JSON encoded object and the content of the given file are equal.
     *
     * @param string $expectedFile
     * @param string $actualJson
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertJsonStringEqualsJsonFile()
     */
    public function tryToAssertJsonStringEqualsJsonFile($expectedFile, $actualJson, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertJsonStringEqualsJsonFile', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertJsonStringEqualsJsonFile and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertJsonStringEqualsJsonFile()
     */
    public function retryAssertJsonStringEqualsJsonFile($expectedFile, $actualJson, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertJsonStringEqualsJsonFile', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two given JSON encoded objects or arrays are equal.
     *
     * @param string $expectedJson
     * @param string $actualJson
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertJsonStringEqualsJsonString()
     */
    public function assertJsonStringEqualsJsonString($expectedJson, $actualJson, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertJsonStringEqualsJsonString', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that two given JSON encoded objects or arrays are equal.
     *
     * @param string $expectedJson
     * @param string $actualJson
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertJsonStringEqualsJsonString()
     */
    public function tryToAssertJsonStringEqualsJsonString($expectedJson, $actualJson, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertJsonStringEqualsJsonString', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertJsonStringEqualsJsonString and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertJsonStringEqualsJsonString()
     */
    public function retryAssertJsonStringEqualsJsonString($expectedJson, $actualJson, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertJsonStringEqualsJsonString', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the generated JSON encoded object and the content of the given file are not equal.
     *
     * @param string $expectedFile
     * @param string $actualJson
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertJsonStringNotEqualsJsonFile()
     */
    public function assertJsonStringNotEqualsJsonFile($expectedFile, $actualJson, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertJsonStringNotEqualsJsonFile', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that the generated JSON encoded object and the content of the given file are not equal.
     *
     * @param string $expectedFile
     * @param string $actualJson
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertJsonStringNotEqualsJsonFile()
     */
    public function tryToAssertJsonStringNotEqualsJsonFile($expectedFile, $actualJson, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertJsonStringNotEqualsJsonFile', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertJsonStringNotEqualsJsonFile and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertJsonStringNotEqualsJsonFile()
     */
    public function retryAssertJsonStringNotEqualsJsonFile($expectedFile, $actualJson, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertJsonStringNotEqualsJsonFile', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two given JSON encoded objects or arrays are not equal.
     *
     * @param string $expectedJson
     * @param string $actualJson
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertJsonStringNotEqualsJsonString()
     */
    public function assertJsonStringNotEqualsJsonString($expectedJson, $actualJson, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertJsonStringNotEqualsJsonString', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that two given JSON encoded objects or arrays are not equal.
     *
     * @param string $expectedJson
     * @param string $actualJson
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertJsonStringNotEqualsJsonString()
     */
    public function tryToAssertJsonStringNotEqualsJsonString($expectedJson, $actualJson, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertJsonStringNotEqualsJsonString', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertJsonStringNotEqualsJsonString and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertJsonStringNotEqualsJsonString()
     */
    public function retryAssertJsonStringNotEqualsJsonString($expectedJson, $actualJson, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertJsonStringNotEqualsJsonString', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a value is smaller than another value.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertLessThan()
     */
    public function assertLessThan($expected, $actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertLessThan', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a value is smaller than another value.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertLessThan()
     */
    public function tryToAssertLessThan($expected, $actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertLessThan', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertLessThan and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertLessThan()
     */
    public function retryAssertLessThan($expected, $actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertLessThan', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a value is smaller than or equal to another value.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertLessThanOrEqual()
     */
    public function assertLessThanOrEqual($expected, $actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertLessThanOrEqual', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a value is smaller than or equal to another value.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertLessThanOrEqual()
     */
    public function tryToAssertLessThanOrEqual($expected, $actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertLessThanOrEqual', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertLessThanOrEqual and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertLessThanOrEqual()
     */
    public function retryAssertLessThanOrEqual($expected, $actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertLessThanOrEqual', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a string matches a given regular expression.
     *
     * @param string $pattern
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertMatchesRegularExpression()
     */
    public function assertMatchesRegularExpression($pattern, $string, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertMatchesRegularExpression', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a string matches a given regular expression.
     *
     * @param string $pattern
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertMatchesRegularExpression()
     */
    public function tryToAssertMatchesRegularExpression($pattern, $string, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertMatchesRegularExpression', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertMatchesRegularExpression and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertMatchesRegularExpression()
     */
    public function retryAssertMatchesRegularExpression($pattern, $string, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertMatchesRegularExpression', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is nan.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNan()
     */
    public function assertNan($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNan', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is nan.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNan()
     */
    public function tryToAssertNan($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertNan', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertNan and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertNan()
     */
    public function retryAssertNan($actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertNan', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a haystack does not contain a needle.
     *
     * @param $needle
     * @param $haystack
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotContains()
     */
    public function assertNotContains($needle, $haystack, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotContains', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a haystack does not contain a needle.
     *
     * @param $needle
     * @param $haystack
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotContains()
     */
    public function tryToAssertNotContains($needle, $haystack, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertNotContains', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertNotContains and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotContains()
     */
    public function retryAssertNotContains($needle, $haystack, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertNotContains', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotContainsEquals()
     */
    public function assertNotContainsEquals($needle, $haystack, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotContainsEquals', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotContainsEquals()
     */
    public function tryToAssertNotContainsEquals($needle, $haystack, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertNotContainsEquals', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertNotContainsEquals and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotContainsEquals()
     */
    public function retryAssertNotContainsEquals($needle, $haystack, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertNotContainsEquals', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a haystack does not contain only values of a given type.
     *
     * @param string $type
     * @param $haystack
     * @param bool|null $isNativeType
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotContainsOnly()
     */
    public function assertNotContainsOnly($type, $haystack, $isNativeType = NULL, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotContainsOnly', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a haystack does not contain only values of a given type.
     *
     * @param string $type
     * @param $haystack
     * @param bool|null $isNativeType
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotContainsOnly()
     */
    public function tryToAssertNotContainsOnly($type, $haystack, $isNativeType = NULL, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertNotContainsOnly', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertNotContainsOnly and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotContainsOnly()
     */
    public function retryAssertNotContainsOnly($type, $haystack, $isNativeType = NULL, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertNotContainsOnly', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts the number of elements of an array, Countable or Traversable.
     *
     * @param int $expectedCount
     * @param Countable|iterable $haystack
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotCount()
     */
    public function assertNotCount($expectedCount, $haystack, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotCount', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts the number of elements of an array, Countable or Traversable.
     *
     * @param int $expectedCount
     * @param Countable|iterable $haystack
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotCount()
     */
    public function tryToAssertNotCount($expectedCount, $haystack, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertNotCount', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertNotCount and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotCount()
     */
    public function retryAssertNotCount($expectedCount, $haystack, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertNotCount', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is not empty.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotEmpty()
     */
    public function assertNotEmpty($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotEmpty', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is not empty.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotEmpty()
     */
    public function tryToAssertNotEmpty($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertNotEmpty', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertNotEmpty and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotEmpty()
     */
    public function retryAssertNotEmpty($actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertNotEmpty', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two variables are not equal.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotEquals()
     */
    public function assertNotEquals($expected, $actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotEquals', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that two variables are not equal.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotEquals()
     */
    public function tryToAssertNotEquals($expected, $actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertNotEquals', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertNotEquals and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotEquals()
     */
    public function retryAssertNotEquals($expected, $actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertNotEquals', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two variables are not equal (canonicalizing).
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotEqualsCanonicalizing()
     */
    public function assertNotEqualsCanonicalizing($expected, $actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotEqualsCanonicalizing', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that two variables are not equal (canonicalizing).
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotEqualsCanonicalizing()
     */
    public function tryToAssertNotEqualsCanonicalizing($expected, $actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertNotEqualsCanonicalizing', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertNotEqualsCanonicalizing and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotEqualsCanonicalizing()
     */
    public function retryAssertNotEqualsCanonicalizing($expected, $actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertNotEqualsCanonicalizing', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two variables are not equal (ignoring case).
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotEqualsIgnoringCase()
     */
    public function assertNotEqualsIgnoringCase($expected, $actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotEqualsIgnoringCase', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that two variables are not equal (ignoring case).
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotEqualsIgnoringCase()
     */
    public function tryToAssertNotEqualsIgnoringCase($expected, $actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertNotEqualsIgnoringCase', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertNotEqualsIgnoringCase and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotEqualsIgnoringCase()
     */
    public function retryAssertNotEqualsIgnoringCase($expected, $actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertNotEqualsIgnoringCase', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two variables are not equal (with delta).
     *
     * @param $expected
     * @param $actual
     * @param float $delta
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotEqualsWithDelta()
     */
    public function assertNotEqualsWithDelta($expected, $actual, $delta, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotEqualsWithDelta', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that two variables are not equal (with delta).
     *
     * @param $expected
     * @param $actual
     * @param float $delta
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotEqualsWithDelta()
     */
    public function tryToAssertNotEqualsWithDelta($expected, $actual, $delta, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertNotEqualsWithDelta', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertNotEqualsWithDelta and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotEqualsWithDelta()
     */
    public function retryAssertNotEqualsWithDelta($expected, $actual, $delta, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertNotEqualsWithDelta', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a condition is not false.
     *
     * @param $condition
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotFalse()
     */
    public function assertNotFalse($condition, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotFalse', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a condition is not false.
     *
     * @param $condition
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotFalse()
     */
    public function tryToAssertNotFalse($condition, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertNotFalse', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertNotFalse and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotFalse()
     */
    public function retryAssertNotFalse($condition, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertNotFalse', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is not of a given type.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotInstanceOf()
     */
    public function assertNotInstanceOf($expected, $actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotInstanceOf', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is not of a given type.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotInstanceOf()
     */
    public function tryToAssertNotInstanceOf($expected, $actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertNotInstanceOf', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertNotInstanceOf and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotInstanceOf()
     */
    public function retryAssertNotInstanceOf($expected, $actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertNotInstanceOf', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is not null.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotNull()
     */
    public function assertNotNull($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotNull', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is not null.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotNull()
     */
    public function tryToAssertNotNull($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertNotNull', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertNotNull and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotNull()
     */
    public function retryAssertNotNull($actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertNotNull', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two variables do not have the same type and value.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotSame()
     */
    public function assertNotSame($expected, $actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotSame', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that two variables do not have the same type and value.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotSame()
     */
    public function tryToAssertNotSame($expected, $actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertNotSame', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertNotSame and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotSame()
     */
    public function retryAssertNotSame($expected, $actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertNotSame', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Assert that the size of two arrays (or `Countable` or `Traversable` objects) is not the same.
     *
     * @param Countable|iterable $expected
     * @param Countable|iterable $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotSameSize()
     */
    public function assertNotSameSize($expected, $actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotSameSize', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Assert that the size of two arrays (or `Countable` or `Traversable` objects) is not the same.
     *
     * @param Countable|iterable $expected
     * @param Countable|iterable $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotSameSize()
     */
    public function tryToAssertNotSameSize($expected, $actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertNotSameSize', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertNotSameSize and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotSameSize()
     */
    public function retryAssertNotSameSize($expected, $actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertNotSameSize', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a condition is not true.
     *
     * @param $condition
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotTrue()
     */
    public function assertNotTrue($condition, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotTrue', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a condition is not true.
     *
     * @param $condition
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNotTrue()
     */
    public function tryToAssertNotTrue($condition, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertNotTrue', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertNotTrue and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertNotTrue()
     */
    public function retryAssertNotTrue($condition, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertNotTrue', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a variable is null.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNull()
     */
    public function assertNull($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNull', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a variable is null.
     *
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertNull()
     */
    public function tryToAssertNull($actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertNull', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertNull and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertNull()
     */
    public function retryAssertNull($actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertNull', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that an object has a specified attribute.
     *
     * @param string $attributeName
     * @param object $object
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertObjectHasAttribute()
     */
    public function assertObjectHasAttribute($attributeName, $object, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertObjectHasAttribute', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that an object has a specified attribute.
     *
     * @param string $attributeName
     * @param object $object
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertObjectHasAttribute()
     */
    public function tryToAssertObjectHasAttribute($attributeName, $object, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertObjectHasAttribute', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertObjectHasAttribute and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertObjectHasAttribute()
     */
    public function retryAssertObjectHasAttribute($attributeName, $object, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertObjectHasAttribute', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that an object does not have a specified attribute.
     *
     * @param string $attributeName
     * @param object $object
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertObjectNotHasAttribute()
     */
    public function assertObjectNotHasAttribute($attributeName, $object, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertObjectNotHasAttribute', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that an object does not have a specified attribute.
     *
     * @param string $attributeName
     * @param object $object
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertObjectNotHasAttribute()
     */
    public function tryToAssertObjectNotHasAttribute($attributeName, $object, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertObjectNotHasAttribute', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertObjectNotHasAttribute and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertObjectNotHasAttribute()
     */
    public function retryAssertObjectNotHasAttribute($attributeName, $object, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertObjectNotHasAttribute', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two variables have the same type and value.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertSame()
     */
    public function assertSame($expected, $actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertSame', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that two variables have the same type and value.
     *
     * @param $expected
     * @param $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertSame()
     */
    public function tryToAssertSame($expected, $actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertSame', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertSame and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertSame()
     */
    public function retryAssertSame($expected, $actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertSame', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Assert that the size of two arrays (or `Countable` or `Traversable` objects) is the same.
     *
     * @param Countable|iterable $expected
     * @param Countable|iterable $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertSameSize()
     */
    public function assertSameSize($expected, $actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertSameSize', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Assert that the size of two arrays (or `Countable` or `Traversable` objects) is the same.
     *
     * @param Countable|iterable $expected
     * @param Countable|iterable $actual
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertSameSize()
     */
    public function tryToAssertSameSize($expected, $actual, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertSameSize', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertSameSize and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertSameSize()
     */
    public function retryAssertSameSize($expected, $actual, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertSameSize', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $needle
     * @param string $haystack
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringContainsString()
     */
    public function assertStringContainsString($needle, $haystack, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertStringContainsString', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * @param string $needle
     * @param string $haystack
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringContainsString()
     */
    public function tryToAssertStringContainsString($needle, $haystack, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertStringContainsString', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertStringContainsString and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringContainsString()
     */
    public function retryAssertStringContainsString($needle, $haystack, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertStringContainsString', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringContainsStringIgnoringCase()
     */
    public function assertStringContainsStringIgnoringCase($needle, $haystack, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertStringContainsStringIgnoringCase', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringContainsStringIgnoringCase()
     */
    public function tryToAssertStringContainsStringIgnoringCase($needle, $haystack, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertStringContainsStringIgnoringCase', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertStringContainsStringIgnoringCase and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringContainsStringIgnoringCase()
     */
    public function retryAssertStringContainsStringIgnoringCase($needle, $haystack, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertStringContainsStringIgnoringCase', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a string ends not with a given suffix.
     *
     * @param string $suffix
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringEndsNotWith()
     */
    public function assertStringEndsNotWith($suffix, $string, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertStringEndsNotWith', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a string ends not with a given suffix.
     *
     * @param string $suffix
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringEndsNotWith()
     */
    public function tryToAssertStringEndsNotWith($suffix, $string, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertStringEndsNotWith', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertStringEndsNotWith and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringEndsNotWith()
     */
    public function retryAssertStringEndsNotWith($suffix, $string, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertStringEndsNotWith', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a string ends with a given suffix.
     *
     * @param string $suffix
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringEndsWith()
     */
    public function assertStringEndsWith($suffix, $string, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertStringEndsWith', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a string ends with a given suffix.
     *
     * @param string $suffix
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringEndsWith()
     */
    public function tryToAssertStringEndsWith($suffix, $string, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertStringEndsWith', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertStringEndsWith and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringEndsWith()
     */
    public function retryAssertStringEndsWith($suffix, $string, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertStringEndsWith', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the contents of a string is equal to the contents of a file.
     *
     * @param string $expectedFile
     * @param string $actualString
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringEqualsFile()
     */
    public function assertStringEqualsFile($expectedFile, $actualString, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertStringEqualsFile', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that the contents of a string is equal to the contents of a file.
     *
     * @param string $expectedFile
     * @param string $actualString
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringEqualsFile()
     */
    public function tryToAssertStringEqualsFile($expectedFile, $actualString, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertStringEqualsFile', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertStringEqualsFile and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringEqualsFile()
     */
    public function retryAssertStringEqualsFile($expectedFile, $actualString, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertStringEqualsFile', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the contents of a string is equal to the contents of a file (canonicalizing).
     *
     * @param string $expectedFile
     * @param string $actualString
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringEqualsFileCanonicalizing()
     */
    public function assertStringEqualsFileCanonicalizing($expectedFile, $actualString, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertStringEqualsFileCanonicalizing', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that the contents of a string is equal to the contents of a file (canonicalizing).
     *
     * @param string $expectedFile
     * @param string $actualString
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringEqualsFileCanonicalizing()
     */
    public function tryToAssertStringEqualsFileCanonicalizing($expectedFile, $actualString, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertStringEqualsFileCanonicalizing', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertStringEqualsFileCanonicalizing and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringEqualsFileCanonicalizing()
     */
    public function retryAssertStringEqualsFileCanonicalizing($expectedFile, $actualString, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertStringEqualsFileCanonicalizing', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the contents of a string is equal to the contents of a file (ignoring case).
     *
     * @param string $expectedFile
     * @param string $actualString
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringEqualsFileIgnoringCase()
     */
    public function assertStringEqualsFileIgnoringCase($expectedFile, $actualString, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertStringEqualsFileIgnoringCase', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that the contents of a string is equal to the contents of a file (ignoring case).
     *
     * @param string $expectedFile
     * @param string $actualString
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringEqualsFileIgnoringCase()
     */
    public function tryToAssertStringEqualsFileIgnoringCase($expectedFile, $actualString, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertStringEqualsFileIgnoringCase', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertStringEqualsFileIgnoringCase and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringEqualsFileIgnoringCase()
     */
    public function retryAssertStringEqualsFileIgnoringCase($expectedFile, $actualString, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertStringEqualsFileIgnoringCase', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a string matches a given format string.
     *
     * @param string $format
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringMatchesFormat()
     */
    public function assertStringMatchesFormat($format, $string, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertStringMatchesFormat', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a string matches a given format string.
     *
     * @param string $format
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringMatchesFormat()
     */
    public function tryToAssertStringMatchesFormat($format, $string, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertStringMatchesFormat', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertStringMatchesFormat and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringMatchesFormat()
     */
    public function retryAssertStringMatchesFormat($format, $string, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertStringMatchesFormat', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a string matches a given format file.
     *
     * @param string $formatFile
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringMatchesFormatFile()
     */
    public function assertStringMatchesFormatFile($formatFile, $string, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertStringMatchesFormatFile', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a string matches a given format file.
     *
     * @param string $formatFile
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringMatchesFormatFile()
     */
    public function tryToAssertStringMatchesFormatFile($formatFile, $string, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertStringMatchesFormatFile', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertStringMatchesFormatFile and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringMatchesFormatFile()
     */
    public function retryAssertStringMatchesFormatFile($formatFile, $string, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertStringMatchesFormatFile', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $needle
     * @param string $haystack
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringNotContainsString()
     */
    public function assertStringNotContainsString($needle, $haystack, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertStringNotContainsString', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * @param string $needle
     * @param string $haystack
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringNotContainsString()
     */
    public function tryToAssertStringNotContainsString($needle, $haystack, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertStringNotContainsString', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertStringNotContainsString and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringNotContainsString()
     */
    public function retryAssertStringNotContainsString($needle, $haystack, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertStringNotContainsString', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $needle
     * @param string $haystack
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringNotContainsStringIgnoringCase()
     */
    public function assertStringNotContainsStringIgnoringCase($needle, $haystack, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertStringNotContainsStringIgnoringCase', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * @param string $needle
     * @param string $haystack
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringNotContainsStringIgnoringCase()
     */
    public function tryToAssertStringNotContainsStringIgnoringCase($needle, $haystack, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertStringNotContainsStringIgnoringCase', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertStringNotContainsStringIgnoringCase and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringNotContainsStringIgnoringCase()
     */
    public function retryAssertStringNotContainsStringIgnoringCase($needle, $haystack, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertStringNotContainsStringIgnoringCase', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the contents of a string is not equal to the contents of a file.
     *
     * @param string $expectedFile
     * @param string $actualString
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringNotEqualsFile()
     */
    public function assertStringNotEqualsFile($expectedFile, $actualString, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertStringNotEqualsFile', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that the contents of a string is not equal to the contents of a file.
     *
     * @param string $expectedFile
     * @param string $actualString
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringNotEqualsFile()
     */
    public function tryToAssertStringNotEqualsFile($expectedFile, $actualString, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertStringNotEqualsFile', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertStringNotEqualsFile and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringNotEqualsFile()
     */
    public function retryAssertStringNotEqualsFile($expectedFile, $actualString, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertStringNotEqualsFile', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the contents of a string is not equal to the contents of a file (canonicalizing).
     * @param string $expectedFile
     * @param string $actualString
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringNotEqualsFileCanonicalizing()
     */
    public function assertStringNotEqualsFileCanonicalizing($expectedFile, $actualString, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertStringNotEqualsFileCanonicalizing', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that the contents of a string is not equal to the contents of a file (canonicalizing).
     * @param string $expectedFile
     * @param string $actualString
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringNotEqualsFileCanonicalizing()
     */
    public function tryToAssertStringNotEqualsFileCanonicalizing($expectedFile, $actualString, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertStringNotEqualsFileCanonicalizing', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertStringNotEqualsFileCanonicalizing and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringNotEqualsFileCanonicalizing()
     */
    public function retryAssertStringNotEqualsFileCanonicalizing($expectedFile, $actualString, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertStringNotEqualsFileCanonicalizing', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that the contents of a string is not equal to the contents of a file (ignoring case).
     *
     * @param string $expectedFile
     * @param string $actualString
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringNotEqualsFileIgnoringCase()
     */
    public function assertStringNotEqualsFileIgnoringCase($expectedFile, $actualString, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertStringNotEqualsFileIgnoringCase', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that the contents of a string is not equal to the contents of a file (ignoring case).
     *
     * @param string $expectedFile
     * @param string $actualString
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringNotEqualsFileIgnoringCase()
     */
    public function tryToAssertStringNotEqualsFileIgnoringCase($expectedFile, $actualString, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertStringNotEqualsFileIgnoringCase', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertStringNotEqualsFileIgnoringCase and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringNotEqualsFileIgnoringCase()
     */
    public function retryAssertStringNotEqualsFileIgnoringCase($expectedFile, $actualString, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertStringNotEqualsFileIgnoringCase', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a string does not match a given format string.
     *
     * @param string $format
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringNotMatchesFormat()
     */
    public function assertStringNotMatchesFormat($format, $string, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertStringNotMatchesFormat', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a string does not match a given format string.
     *
     * @param string $format
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringNotMatchesFormat()
     */
    public function tryToAssertStringNotMatchesFormat($format, $string, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertStringNotMatchesFormat', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertStringNotMatchesFormat and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringNotMatchesFormat()
     */
    public function retryAssertStringNotMatchesFormat($format, $string, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertStringNotMatchesFormat', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a string does not match a given format string.
     *
     * @param string $formatFile
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringNotMatchesFormatFile()
     */
    public function assertStringNotMatchesFormatFile($formatFile, $string, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertStringNotMatchesFormatFile', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a string does not match a given format string.
     *
     * @param string $formatFile
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringNotMatchesFormatFile()
     */
    public function tryToAssertStringNotMatchesFormatFile($formatFile, $string, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertStringNotMatchesFormatFile', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertStringNotMatchesFormatFile and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringNotMatchesFormatFile()
     */
    public function retryAssertStringNotMatchesFormatFile($formatFile, $string, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertStringNotMatchesFormatFile', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a string starts not with a given prefix.
     *
     * @param string $prefix
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringStartsNotWith()
     */
    public function assertStringStartsNotWith($prefix, $string, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertStringStartsNotWith', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a string starts not with a given prefix.
     *
     * @param string $prefix
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringStartsNotWith()
     */
    public function tryToAssertStringStartsNotWith($prefix, $string, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertStringStartsNotWith', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertStringStartsNotWith and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringStartsNotWith()
     */
    public function retryAssertStringStartsNotWith($prefix, $string, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertStringStartsNotWith', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a string starts with a given prefix.
     *
     * @param string $prefix
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringStartsWith()
     */
    public function assertStringStartsWith($prefix, $string, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertStringStartsWith', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a string starts with a given prefix.
     *
     * @param string $prefix
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertStringStartsWith()
     */
    public function tryToAssertStringStartsWith($prefix, $string, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertStringStartsWith', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertStringStartsWith and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertStringStartsWith()
     */
    public function retryAssertStringStartsWith($prefix, $string, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertStringStartsWith', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Evaluates a PHPUnit\Framework\Constraint matcher object.
     *
     * @param $value
     * @param Constraint $constraint
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertThat()
     */
    public function assertThat($value, $constraint, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertThat', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Evaluates a PHPUnit\Framework\Constraint matcher object.
     *
     * @param $value
     * @param Constraint $constraint
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertThat()
     */
    public function tryToAssertThat($value, $constraint, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertThat', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertThat and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertThat()
     */
    public function retryAssertThat($value, $constraint, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertThat', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that a condition is true.
     *
     * @param $condition
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertTrue()
     */
    public function assertTrue($condition, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertTrue', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that a condition is true.
     *
     * @param $condition
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertTrue()
     */
    public function tryToAssertTrue($condition, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertTrue', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertTrue and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertTrue()
     */
    public function retryAssertTrue($condition, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertTrue', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two XML files are equal.
     *
     * @param string $expectedFile
     * @param string $actualFile
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertXmlFileEqualsXmlFile()
     */
    public function assertXmlFileEqualsXmlFile($expectedFile, $actualFile, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertXmlFileEqualsXmlFile', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that two XML files are equal.
     *
     * @param string $expectedFile
     * @param string $actualFile
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertXmlFileEqualsXmlFile()
     */
    public function tryToAssertXmlFileEqualsXmlFile($expectedFile, $actualFile, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertXmlFileEqualsXmlFile', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertXmlFileEqualsXmlFile and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertXmlFileEqualsXmlFile()
     */
    public function retryAssertXmlFileEqualsXmlFile($expectedFile, $actualFile, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertXmlFileEqualsXmlFile', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two XML files are not equal.
     *
     * @param string $expectedFile
     * @param string $actualFile
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertXmlFileNotEqualsXmlFile()
     */
    public function assertXmlFileNotEqualsXmlFile($expectedFile, $actualFile, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertXmlFileNotEqualsXmlFile', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that two XML files are not equal.
     *
     * @param string $expectedFile
     * @param string $actualFile
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertXmlFileNotEqualsXmlFile()
     */
    public function tryToAssertXmlFileNotEqualsXmlFile($expectedFile, $actualFile, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertXmlFileNotEqualsXmlFile', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertXmlFileNotEqualsXmlFile and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertXmlFileNotEqualsXmlFile()
     */
    public function retryAssertXmlFileNotEqualsXmlFile($expectedFile, $actualFile, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertXmlFileNotEqualsXmlFile', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two XML documents are equal.
     *
     * @param string $expectedFile
     * @param DOMDocument|string $actualXml
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertXmlStringEqualsXmlFile()
     */
    public function assertXmlStringEqualsXmlFile($expectedFile, $actualXml, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertXmlStringEqualsXmlFile', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that two XML documents are equal.
     *
     * @param string $expectedFile
     * @param DOMDocument|string $actualXml
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertXmlStringEqualsXmlFile()
     */
    public function tryToAssertXmlStringEqualsXmlFile($expectedFile, $actualXml, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertXmlStringEqualsXmlFile', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertXmlStringEqualsXmlFile and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertXmlStringEqualsXmlFile()
     */
    public function retryAssertXmlStringEqualsXmlFile($expectedFile, $actualXml, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertXmlStringEqualsXmlFile', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two XML documents are equal.
     *
     * @param DOMDocument|string $expectedXml
     * @param DOMDocument|string $actualXml
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertXmlStringEqualsXmlString()
     */
    public function assertXmlStringEqualsXmlString($expectedXml, $actualXml, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertXmlStringEqualsXmlString', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that two XML documents are equal.
     *
     * @param DOMDocument|string $expectedXml
     * @param DOMDocument|string $actualXml
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertXmlStringEqualsXmlString()
     */
    public function tryToAssertXmlStringEqualsXmlString($expectedXml, $actualXml, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertXmlStringEqualsXmlString', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertXmlStringEqualsXmlString and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertXmlStringEqualsXmlString()
     */
    public function retryAssertXmlStringEqualsXmlString($expectedXml, $actualXml, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertXmlStringEqualsXmlString', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two XML documents are not equal.
     *
     * @param string $expectedFile
     * @param DOMDocument|string $actualXml
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertXmlStringNotEqualsXmlFile()
     */
    public function assertXmlStringNotEqualsXmlFile($expectedFile, $actualXml, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertXmlStringNotEqualsXmlFile', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that two XML documents are not equal.
     *
     * @param string $expectedFile
     * @param DOMDocument|string $actualXml
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertXmlStringNotEqualsXmlFile()
     */
    public function tryToAssertXmlStringNotEqualsXmlFile($expectedFile, $actualXml, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertXmlStringNotEqualsXmlFile', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertXmlStringNotEqualsXmlFile and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertXmlStringNotEqualsXmlFile()
     */
    public function retryAssertXmlStringNotEqualsXmlFile($expectedFile, $actualXml, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertXmlStringNotEqualsXmlFile', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that two XML documents are not equal.
     *
     * @param DOMDocument|string $expectedXml
     * @param DOMDocument|string $actualXml
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertXmlStringNotEqualsXmlString()
     */
    public function assertXmlStringNotEqualsXmlString($expectedXml, $actualXml, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertXmlStringNotEqualsXmlString', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Asserts that two XML documents are not equal.
     *
     * @param DOMDocument|string $expectedXml
     * @param DOMDocument|string $actualXml
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::assertXmlStringNotEqualsXmlString()
     */
    public function tryToAssertXmlStringNotEqualsXmlString($expectedXml, $actualXml, $message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('assertXmlStringNotEqualsXmlString', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes assertXmlStringNotEqualsXmlString and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::assertXmlStringNotEqualsXmlString()
     */
    public function retryAssertXmlStringNotEqualsXmlString($expectedXml, $actualXml, $message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('assertXmlStringNotEqualsXmlString', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Fails a test with the given message.
     *
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::fail()
     */
    public function fail($message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fail', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Fails a test with the given message.
     *
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::fail()
     */
    public function tryToFail($message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('fail', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes fail and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::fail()
     */
    public function retryFail($message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('fail', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Mark the test as incomplete.
     *
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::markTestIncomplete()
     */
    public function markTestIncomplete($message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('markTestIncomplete', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Mark the test as incomplete.
     *
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::markTestIncomplete()
     */
    public function tryToMarkTestIncomplete($message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('markTestIncomplete', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes markTestIncomplete and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::markTestIncomplete()
     */
    public function retryMarkTestIncomplete($message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('markTestIncomplete', func_get_args(), $retryNum, $retryInterval));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Mark the test as skipped.
     *
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::markTestSkipped()
     */
    public function markTestSkipped($message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('markTestSkipped', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Test won't be stopped on fail. Error won't be logged 
     * Mark the test as skipped.
     *
     * @param string $message
     * @see \Codeception\Module\AbstractAsserts::markTestSkipped()
     */
    public function tryToMarkTestSkipped($message = "") {
        return $this->getScenario()->runStep(new \Codeception\Step\TryTo('markTestSkipped', func_get_args()));
    }    
    /**
     * [!] Method is generated.
     * 
     * * Executes markTestSkipped and retries on failure.
     * 
     * Retry number and interval set by $I->retry();
     *
     * @see \Codeception\Module\AbstractAsserts::markTestSkipped()
     */
    public function retryMarkTestSkipped($message = "") {
        $retryNum = isset($this->retryNum) ? $this->retryNum : 1;
        $retryInterval = isset($this->retryInterval) ? $this->retryInterval : 200;
        return $this->getScenario()->runStep(new \Codeception\Step\Retry('markTestSkipped', func_get_args(), $retryNum, $retryInterval));
    }
}
